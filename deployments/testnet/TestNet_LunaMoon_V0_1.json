{
  "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExcluded",
          "type": "bool"
        }
      ],
      "name": "ExcludeFromFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExcluded",
          "type": "bool"
        }
      ],
      "name": "ExcludeMultipleAccountsFromFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "ExcludedFromMaxWalletChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        }
      ],
      "name": "GasForProcessingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LunaBurnFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "MarketingEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MarketingFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMarketingWallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMarketingWallet",
          "type": "address"
        }
      ],
      "name": "MarketingWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "iterations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claims",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastProcessedIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "automatic",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "processor",
          "type": "address"
        }
      ],
      "name": "Processed_lunaDividendTracker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SendDividends",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "SetAutomatedMarketMakerPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bnbReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIntoLiqudity",
          "type": "uint256"
        }
      ],
      "name": "SwapAndLiquify",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SwapAndLiquifyEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        }
      ],
      "name": "UpdateUniswapV2Router",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        }
      ],
      "name": "Update_lunaDividendTracker",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "_LUNADividendEnabledUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_address",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amount",
          "type": "uint256[]"
        }
      ],
      "name": "KKAirdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LUNABurnBuyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LUNABurnSellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LUNARewardsBuyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LUNARewardsSellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LiqSwapSendActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ProcessDividendStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lunaDividendEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lunaDividendToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "_lunaDividendTokenBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_lunaDividendTracker",
      "outputs": [
        {
          "internalType": "contract _LUNADividendTracker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "activateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "automatedMarketMakerPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockMultiBuys",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnBuyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnSellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyFeeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buySecondsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devBuyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devSellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "editExcludedFromMaxWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "buy",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "sell",
          "type": "bool"
        }
      ],
      "name": "editLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_address",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_states",
          "type": "bool[]"
        }
      ],
      "name": "editMultiExcludedFromMaxWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "editPreMarketUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "edit_excludeFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "excludeFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "excluded",
          "type": "bool"
        }
      ],
      "name": "excludeMultipleAccountsFromFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "excludedFromFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "excludedFromMaxWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasForProcessing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccount_LUNADividendsInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getAccount_LUNADividendsInfoAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLUNAClaimWait",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLast_LUNADividendProcessedIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOf_LUNADividendTokenHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotal_LUNADividendsDistributed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "intervalSecondsForSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitBuys",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitSells",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqBuyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqSellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lunaAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lunaBurnSwapSendActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lunaBurnWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingBuyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingSellFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingSwapSendActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketingWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBuyTxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSellTxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWallet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWalletAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTokensBeforeSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumWeiForTokenomics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "premarketUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepareForLaunch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partnerOrExchangeAddress",
          "type": "address"
        }
      ],
      "name": "prepareForPartnerOrExchangeListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "processDividendTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sellFeeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "setAuthOnDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setAutomatedMarketMakerPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reward_buy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liq_buy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketing_buy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_luna_burn_buy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burn_buy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dev_buy",
          "type": "uint256"
        }
      ],
      "name": "setBuyFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buy",
          "type": "uint256"
        }
      ],
      "name": "setBuySecondLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_feeStatus",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_buyFeeStatus",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_sellFeeStatus",
          "type": "bool"
        }
      ],
      "name": "setFeesDetails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "setLunaAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setMarketingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_buy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sell",
          "type": "uint256"
        }
      ],
      "name": "setMaxTxAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "setMaxWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setMinimumWeiForTokenomics",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setMultiBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "setProcessDividendStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reward_sell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liq_sell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketing_sell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_luna_burn_sell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_burn_sell",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dev_sell",
          "type": "uint256"
        }
      ],
      "name": "setSellFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_intervalSecondsForSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumTokensBeforeSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokensToSwap",
          "type": "uint256"
        }
      ],
      "name": "setSwapAndLiquify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_marketing",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_liq",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_burn",
          "type": "bool"
        }
      ],
      "name": "setSwapSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "set_LUNADividendEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWallet",
          "type": "address"
        }
      ],
      "name": "setliqWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndLiquifyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensToSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBuyFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSellFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferForeignToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_sent",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimWait",
          "type": "uint256"
        }
      ],
      "name": "updateClaimWait",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateGasForProcessing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWallet",
          "type": "address"
        }
      ],
      "name": "updateLiqWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newWallet",
          "type": "address"
        }
      ],
      "name": "updateMarketingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumBalance",
          "type": "uint256"
        }
      ],
      "name": "updateMinimumBalanceForDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateUniswapV2Router",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gas",
          "type": "uint256"
        }
      ],
      "name": "update_LUNADividendToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "update_lunaDividendTracker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userLastTradeData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastBuyTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdrawable_LUNADividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
  "receipt": {
    "to": null,
    "from": "0x7474658eDA4B4A635Cb13941E7b7f285eaB2e686",
    "contractAddress": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
    "transactionIndex": 0,
    "gasUsed": "11545689",
    "logsBloom": "0x0000000200001000000000080000000000000000000a000080800800000000000000000000100000000000002000006000200000000000000200000000040000100000000010080000020008000000000001010000040200000000000000000000004000420000000000010000000800000000000000000000000010400000400000000000002000000014000000000000000000000000000000800100000000000000000800000010000004000000000000000000000000000000000000000000000402000000000000100000000040002000000000000000000000008060000000000000000000080000000000100000000040000000000004000000100080",
    "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b",
    "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007474658eda4b4a635cb13941e7b7f285eab2e686"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000388b4a353cf66c107aedc81d1dd5c9fc22233f22"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xb4e6031F3a95E737046370a05d9add865c3D9A3B",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x000000000000000000000000388b4a353cf66c107aedc81d1dd5c9fc22233f22",
          "0x00000000000000000000000067e93a67160dd2ae54f8ef840d1bfdada72e6b16"
        ],
        "data": "0x000000000000000000000000c9ec0386852593da42415d36e7c13d137a519c170000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 2,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0xa878b31040b2e6d0a9a3d3361209db3908ba62014b0dca52adbaee451d128b25",
          "0x000000000000000000000000c9ec0386852593da42415d36e7c13d137a519c17"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0xffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab",
          "0x000000000000000000000000c9ec0386852593da42415d36e7c13d137a519c17",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0xa878b31040b2e6d0a9a3d3361209db3908ba62014b0dca52adbaee451d128b25",
          "0x000000000000000000000000c2585b395595bbd6a4a2f0ec164ec2337b9c67a3"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0xa878b31040b2e6d0a9a3d3361209db3908ba62014b0dca52adbaee451d128b25",
          "0x000000000000000000000000388b4a353cf66c107aedc81d1dd5c9fc22233f22"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0xa878b31040b2e6d0a9a3d3361209db3908ba62014b0dca52adbaee451d128b25",
          "0x000000000000000000000000881703b8a543cc2fc24c38718f1f725b579381c4"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0xa878b31040b2e6d0a9a3d3361209db3908ba62014b0dca52adbaee451d128b25",
          "0x000000000000000000000000000000000000000000000000000000000000dead"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0xC2585b395595bbD6A4A2f0ec164Ec2337B9C67A3",
        "topics": [
          "0xa878b31040b2e6d0a9a3d3361209db3908ba62014b0dca52adbaee451d128b25",
          "0x0000000000000000000000007474658eda4b4a635cb13941e7b7f285eab2e686"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0x9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7",
          "0x0000000000000000000000007474658eda4b4a635cb13941e7b7f285eab2e686"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 10,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0x9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7",
          "0x0000000000000000000000007474658eda4b4a635cb13941e7b7f285eab2e686"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 11,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0x9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7",
          "0x000000000000000000000000388b4a353cf66c107aedc81d1dd5c9fc22233f22"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 12,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0x9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7",
          "0x000000000000000000000000000000000000000000000000000000000000dead"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 13,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0x9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7",
          "0x0000000000000000000000007474658eda4b4a635cb13941e7b7f285eab2e686"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 14,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22943995,
        "transactionHash": "0x0aad4f86844c41ce2d33172405fea793daf6ef09b37484edbb3e3ac01d51a72c",
        "address": "0x388b4a353cF66c107aeDc81D1Dd5c9Fc22233F22",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007474658eda4b4a635cb13941e7b7f285eab2e686"
        ],
        "data": "0x0000000000000000000000000000000000000000000000008ac7230489e80000",
        "logIndex": 15,
        "blockHash": "0xcf274d5c65e5dea078fd269cabe2d3271beba4af39443598984eda336c0f5a7b"
      }
    ],
    "blockNumber": 22943995,
    "cumulativeGasUsed": "11545689",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6ecc6150865558444e679984afcfffa1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ExcludedFromMaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LunaBurnFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MarketingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"Processed_lunaDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"Update_lunaDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_LUNADividendEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"KKAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNABurnBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNABurnSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNARewardsBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNARewardsSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiqSwapSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProcessDividendStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lunaDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lunaDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_lunaDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lunaDividendTracker\",\"outputs\":[{\"internalType\":\"contract _LUNADividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"activateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockMultiBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySecondsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"editExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"}],\"name\":\"editLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_states\",\"type\":\"bool[]\"}],\"name\":\"editMultiExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"editPreMarketUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"edit_excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccount_LUNADividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccount_LUNADividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLUNAClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLast_LUNADividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOf_LUNADividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotal_LUNADividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSells\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunaBurnSwapSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunaBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwapSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWeiForTokenomics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"premarketUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerOrExchangeAddress\",\"type\":\"address\"}],\"name\":\"prepareForPartnerOrExchangeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAuthOnDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liq_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_luna_burn_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev_buy\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"}],\"name\":\"setBuySecondLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_feeStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_buyFeeStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sellFeeStatus\",\"type\":\"bool\"}],\"name\":\"setFeesDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setLunaAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinimumWeiForTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMultiBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setProcessDividendStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liq_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_luna_burn_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev_sell\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSecondsForSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_marketing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liq\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_burn\",\"type\":\"bool\"}],\"name\":\"setSwapSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"set_LUNADividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setliqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateLiqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"update_LUNADividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"update_lunaDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastTradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawable_LUNADividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LunaMoon.sol\":\"TestNet_LunaMoon_V0_1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DividendPayingToken/DividendPayingToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../ERC20/ERC20.sol\\\";\\nimport \\\"./IDividendPayingToken.sol\\\";\\nimport \\\"./IDividendPayingTokenOptional.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\nimport \\\"../math/SafeMathInt.sol\\\";\\nimport \\\"../math/SafeMathUint.sol\\\";\\n\\ncontract DividendPayingToken is\\n  ERC20,\\n  IDividendPayingToken,\\n  IDividendPayingTokenOptional,\\n  Ownable\\n{\\n  using SafeMath for uint256;\\n  using SafeMathUint for uint256;\\n  using SafeMathInt for int256;\\n\\n  uint256 internal constant magnitude = 2**128;\\n\\n  uint256 internal magnifiedDividendPerShare;\\n  uint256 internal lastAmount;\\n\\n  address public dividendToken;\\n\\n  mapping(address => int256) internal magnifiedDividendCorrections;\\n  mapping(address => uint256) internal withdrawnDividends;\\n  mapping(address => bool) internal _isAuth;\\n\\n  uint256 public totalDividendsDistributed;\\n\\n  modifier onlyAuth() {\\n    require(_isAuth[msg.sender], \\\"Auth: caller is not the authorized\\\");\\n    _;\\n  }\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address _token\\n  ) ERC20(_name, _symbol) {\\n    dividendToken = _token;\\n    _isAuth[msg.sender] = true;\\n  }\\n\\n  function setAuth(address account) external onlyOwner {\\n    _isAuth[account] = true;\\n  }\\n\\n  function distributeDividends(uint256 amount) public onlyOwner {\\n    require(totalSupply() > 0);\\n\\n    if (amount > 0) {\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\n        (amount).mul(magnitude) / totalSupply()\\n      );\\n      emit DividendsDistributed(msg.sender, amount);\\n\\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\\n    }\\n  }\\n\\n  function withdrawDividend() public virtual override {\\n    _withdrawDividendOfUser(payable(msg.sender));\\n  }\\n\\n  function setDividendTokenAddress(address newToken)\\n    external\\n    virtual\\n    onlyOwner\\n  {\\n    dividendToken = newToken;\\n  }\\n\\n  function _withdrawDividendOfUser(address payable user)\\n    internal\\n    returns (uint256)\\n  {\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\n    if (_withdrawableDividend > 0) {\\n      withdrawnDividends[user] = withdrawnDividends[user].add(\\n        _withdrawableDividend\\n      );\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\n      bool success = IERC20(dividendToken).transfer(\\n        user,\\n        _withdrawableDividend\\n      );\\n\\n      if (!success) {\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(\\n          _withdrawableDividend\\n        );\\n        return 0;\\n      }\\n\\n      return _withdrawableDividend;\\n    }\\n\\n    return 0;\\n  }\\n\\n  function dividendOf(address _owner) public view override returns (uint256) {\\n    return withdrawableDividendOf(_owner);\\n  }\\n\\n  function withdrawableDividendOf(address _owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\n  }\\n\\n  function withdrawnDividendOf(address _owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return withdrawnDividends[_owner];\\n  }\\n\\n  function accumulativeDividendOf(address _owner)\\n    public\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return\\n      magnifiedDividendPerShare\\n        .mul(balanceOf(_owner))\\n        .toInt256Safe()\\n        .add(magnifiedDividendCorrections[_owner])\\n        .toUint256Safe() / magnitude;\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal virtual override {\\n    require(false);\\n\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(\\n      _magCorrection\\n    );\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(\\n      _magCorrection\\n    );\\n  }\\n\\n  function _mint(address account, uint256 value) internal override {\\n    super._mint(account, value);\\n\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n      account\\n    ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n  }\\n\\n  function _burn(address account, uint256 value) internal override {\\n    super._burn(account, value);\\n\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\\n      account\\n    ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\\n  }\\n\\n  function _setBalance(address account, uint256 newBalance) internal {\\n    uint256 currentBalance = balanceOf(account);\\n\\n    if (newBalance > currentBalance) {\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\n      _mint(account, mintAmount);\\n    } else if (newBalance < currentBalance) {\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\n      _burn(account, burnAmount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xba9455e0d48aafb315e6f845f28a75e83a7e485c75d47b5ade46c2da177c2371\",\"license\":\"MIT\"},\"contracts/DividendPayingToken/IDividendPayingToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IDividendPayingToken {\\n  function dividendOf(address _owner) external view returns (uint256);\\n\\n  function withdrawDividend() external;\\n\\n  event DividendsDistributed(address indexed from, uint256 weiAmount);\\n\\n  event DividendWithdrawn(address indexed to, uint256 weiAmount);\\n}\\n\",\"keccak256\":\"0x915759c5e92d70918a64d22596d5f0eac354da869f0a42523ef16a025d023486\",\"license\":\"MIT\"},\"contracts/DividendPayingToken/IDividendPayingTokenOptional.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IDividendPayingTokenOptional {\\n  function withdrawableDividendOf(address _owner)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function withdrawnDividendOf(address _owner) external view returns (uint256);\\n\\n  function accumulativeDividendOf(address _owner)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\",\"keccak256\":\"0x928959ea2e9343b76055fce9a8b6825bc2b61eb20e047252f2fa78204b246585\",\"license\":\"MIT\"},\"contracts/ERC20/ERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../math/SafeMath.sol\\\";\\n\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMath for uint256;\\n\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _decimals = 9;\\n  }\\n\\n  function name() public view virtual returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view virtual returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view virtual returns (uint8) {\\n    return 9;\\n  }\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _balances[account];\\n  }\\n\\n  function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(\\n        amount,\\n        \\\"ERC20: transfer amount exceeds allowance\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].add(addedValue)\\n    );\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(\\n      amount,\\n      \\\"ERC20: transfer amount exceeds balance\\\"\\n    );\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(\\n      amount,\\n      \\\"ERC20: burn amount exceeds balance\\\"\\n    );\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _setupDecimals(uint8 decimals_) internal virtual {\\n    _decimals = decimals_;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x70ff355e7a6b6ebea9c535f5e9e2e0f1d0f432ffe8dea9a9f6f4c3f8794d0699\",\"license\":\"MIT\"},\"contracts/ERC20/IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd97eef129370e64b5b0c5714b601a6cc707fa4805a0f07017a41e2de30e4fd46\",\"license\":\"MIT\"},\"contracts/IterableMapping/IterableMapping.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary IterableMapping {\\n  // Iterable mapping from address to uint;\\n  struct Map {\\n    address[] keys;\\n    mapping(address => uint256) values;\\n    mapping(address => uint256) indexOf;\\n    mapping(address => bool) inserted;\\n  }\\n\\n  function get(Map storage map, address key) internal view returns (uint256) {\\n    return map.values[key];\\n  }\\n\\n  function getIndexOfKey(Map storage map, address key)\\n    internal\\n    view\\n    returns (int256)\\n  {\\n    if (!map.inserted[key]) {\\n      return -1;\\n    }\\n    return int256(map.indexOf[key]);\\n  }\\n\\n  function getKeyAtIndex(Map storage map, uint256 index)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    return map.keys[index];\\n  }\\n\\n  function size(Map storage map) internal view returns (uint256) {\\n    return map.keys.length;\\n  }\\n\\n  function set(\\n    Map storage map,\\n    address key,\\n    uint256 val\\n  ) internal {\\n    if (map.inserted[key]) {\\n      map.values[key] = val;\\n    } else {\\n      map.inserted[key] = true;\\n      map.values[key] = val;\\n      map.indexOf[key] = map.keys.length;\\n      map.keys.push(key);\\n    }\\n  }\\n\\n  function remove(Map storage map, address key) internal {\\n    if (!map.inserted[key]) {\\n      return;\\n    }\\n\\n    delete map.inserted[key];\\n    delete map.values[key];\\n\\n    uint256 index = map.indexOf[key];\\n    uint256 lastIndex = map.keys.length - 1;\\n    address lastKey = map.keys[lastIndex];\\n\\n    map.indexOf[lastKey] = index;\\n    delete map.indexOf[key];\\n\\n    map.keys[index] = lastKey;\\n    map.keys.pop();\\n  }\\n}\\n\",\"keccak256\":\"0x97af013214944694a039eef4688e4088fefeb95864519154683b4be4f8ce8925\",\"license\":\"MIT\"},\"contracts/LunaDividendTracker.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./DividendPayingToken/DividendPayingToken.sol\\\";\\nimport \\\"./IterableMapping/IterableMapping.sol\\\";\\n\\ncontract _LUNADividendTracker is DividendPayingToken {\\n  using SafeMath for uint256;\\n  using SafeMathInt for int256;\\n  using IterableMapping for IterableMapping.Map;\\n\\n  IterableMapping.Map private tokenHoldersMap;\\n  uint256 public lastProcessedIndex;\\n\\n  mapping(address => bool) public excludedFromDividends;\\n\\n  mapping(address => uint256) public lastClaimTimes;\\n\\n  uint256 public claimWait;\\n  uint256 public minimumTokenBalanceForDividends;\\n\\n  event ExcludeFromDividends(address indexed account);\\n  event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\n\\n  event Claim(address indexed account, uint256 amount, bool indexed automatic);\\n\\n  constructor(address _dividentToken)\\n    DividendPayingToken(\\\"Luna_Tracker\\\", \\\"Luna_Tracker\\\", _dividentToken)\\n  {\\n    claimWait = 60;\\n    minimumTokenBalanceForDividends = 100_000 * (10**9);\\n  }\\n\\n  function _transfer(\\n    address,\\n    address,\\n    uint256\\n  ) internal pure override {\\n    require(false, \\\"Luna_Tracker: No transfers allowed\\\");\\n  }\\n\\n  function withdrawDividend() public pure override {\\n    require(\\n      false,\\n      \\\"Luna_Tracker: withdrawDividend disabled. Use the 'claim' function on the main Luna contract.\\\"\\n    );\\n  }\\n\\n  function setDividendTokenAddress(address newToken)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    dividendToken = newToken;\\n  }\\n\\n  function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance)\\n    external\\n    onlyOwner\\n  {\\n    require(\\n      _newMinimumBalance != minimumTokenBalanceForDividends,\\n      \\\"New mimimum balance for dividend cannot be same as current minimum balance\\\"\\n    );\\n    minimumTokenBalanceForDividends = _newMinimumBalance * (10**9);\\n  }\\n\\n  function excludeFromDividends(address account) external onlyOwner {\\n    require(\\n      !excludedFromDividends[account],\\n      \\\"address already excluded from dividends\\\"\\n    );\\n    excludedFromDividends[account] = true;\\n\\n    _setBalance(account, 0);\\n    tokenHoldersMap.remove(account);\\n\\n    emit ExcludeFromDividends(account);\\n  }\\n\\n  function includeFromDividends(address account) external onlyOwner {\\n    excludedFromDividends[account] = false;\\n  }\\n\\n  function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\n    require(\\n      newClaimWait >= 3600 && newClaimWait <= 86400,\\n      \\\"Luna_Tracker: claimWait must be updated to between 1 and 24 hours\\\"\\n    );\\n    require(\\n      newClaimWait != claimWait,\\n      \\\"Luna_Tracker: Cannot update claimWait to same value\\\"\\n    );\\n    emit ClaimWaitUpdated(newClaimWait, claimWait);\\n    claimWait = newClaimWait;\\n  }\\n\\n  function getLastProcessedIndex() external view returns (uint256) {\\n    return lastProcessedIndex;\\n  }\\n\\n  function getNumberOfTokenHolders() external view returns (uint256) {\\n    return tokenHoldersMap.keys.length;\\n  }\\n\\n  function getAccount(address _account)\\n    public\\n    view\\n    returns (\\n      address account,\\n      int256 index,\\n      int256 iterationsUntilProcessed,\\n      uint256 withdrawableDividends,\\n      uint256 totalDividends,\\n      uint256 lastClaimTime,\\n      uint256 nextClaimTime,\\n      uint256 secondsUntilAutoClaimAvailable\\n    )\\n  {\\n    account = _account;\\n\\n    index = tokenHoldersMap.getIndexOfKey(account);\\n\\n    iterationsUntilProcessed = -1;\\n\\n    if (index >= 0) {\\n      if (uint256(index) > lastProcessedIndex) {\\n        iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\n      } else {\\n        uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\\n          lastProcessedIndex\\n          ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\\n          : 0;\\n\\n        iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\n      }\\n    }\\n\\n    withdrawableDividends = withdrawableDividendOf(account);\\n    totalDividends = accumulativeDividendOf(account);\\n\\n    lastClaimTime = lastClaimTimes[account];\\n\\n    nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\\n\\n    secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\\n      ? nextClaimTime.sub(block.timestamp)\\n      : 0;\\n  }\\n\\n  function getAccountAtIndex(uint256 index)\\n    public\\n    view\\n    returns (\\n      address,\\n      int256,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    if (index >= tokenHoldersMap.size()) {\\n      return (\\n        0x0000000000000000000000000000000000000000,\\n        -1,\\n        -1,\\n        0,\\n        0,\\n        0,\\n        0,\\n        0\\n      );\\n    }\\n\\n    address account = tokenHoldersMap.getKeyAtIndex(index);\\n\\n    return getAccount(account);\\n  }\\n\\n  function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\n    if (lastClaimTime > block.timestamp) {\\n      return false;\\n    }\\n\\n    return block.timestamp.sub(lastClaimTime) >= claimWait;\\n  }\\n\\n  function setBalance(address payable account, uint256 newBalance)\\n    external\\n    onlyOwner\\n  {\\n    if (excludedFromDividends[account]) {\\n      return;\\n    }\\n\\n    if (newBalance >= minimumTokenBalanceForDividends) {\\n      _setBalance(account, newBalance);\\n      tokenHoldersMap.set(account, newBalance);\\n    } else {\\n      _setBalance(account, 0);\\n      tokenHoldersMap.remove(account);\\n    }\\n\\n    processAccount(account, true);\\n  }\\n\\n  function process(uint256 gas)\\n    public\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\n\\n    if (numberOfTokenHolders == 0) {\\n      return (0, 0, lastProcessedIndex);\\n    }\\n\\n    uint256 _lastProcessedIndex = lastProcessedIndex;\\n\\n    uint256 gasUsed = 0;\\n\\n    uint256 gasLeft = gasleft();\\n\\n    uint256 iterations = 0;\\n    uint256 claims = 0;\\n\\n    while (gasUsed < gas && iterations < numberOfTokenHolders) {\\n      _lastProcessedIndex++;\\n\\n      if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\\n        _lastProcessedIndex = 0;\\n      }\\n\\n      address account = tokenHoldersMap.keys[_lastProcessedIndex];\\n\\n      if (canAutoClaim(lastClaimTimes[account])) {\\n        if (processAccount(payable(account), true)) {\\n          claims++;\\n        }\\n      }\\n\\n      iterations++;\\n\\n      uint256 newGasLeft = gasleft();\\n\\n      if (gasLeft > newGasLeft) {\\n        gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\n      }\\n\\n      gasLeft = newGasLeft;\\n    }\\n\\n    lastProcessedIndex = _lastProcessedIndex;\\n\\n    return (iterations, claims, lastProcessedIndex);\\n  }\\n\\n  function processAccount(address payable account, bool automatic)\\n    public\\n    onlyOwner\\n    returns (bool)\\n  {\\n    uint256 amount = _withdrawDividendOfUser(account);\\n\\n    if (amount > 0) {\\n      lastClaimTimes[account] = block.timestamp;\\n      emit Claim(account, amount, automatic);\\n      return true;\\n    }\\n\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0x6bb9294a7cd529ef481e47d67eeb0c22143fc6d19c66d56c26a4fc8c41536d2a\",\"license\":\"MIT\"},\"contracts/LunaMoon.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./ERC20/ERC20.sol\\\";\\nimport \\\"./access/Ownable.sol\\\";\\nimport \\\"./math/SafeMath.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Router02.sol\\\";\\nimport \\\"./LunaDividendTracker.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswap/IUniswapV2Factory.sol\\\";\\n\\ncontract TestNet_LunaMoon_V0_1 is ERC20, Ownable {\\n  //library\\n  using SafeMath for uint256;\\n  //custom\\n  IUniswapV2Router02 public uniswapV2Router;\\n  _LUNADividendTracker public _lunaDividendTracker;\\n  //address\\n  address public uniswapV2Pair;\\n  address public marketingWallet = 0x7474658eDA4B4A635Cb13941E7b7f285eaB2e686; // development wallet\\n  address public lunaBurnWallet = 0x7474658eDA4B4A635Cb13941E7b7f285eaB2e686; // development wallet\\n  address public liqWallet = 0x7474658eDA4B4A635Cb13941E7b7f285eaB2e686; // development wallet\\n  address public _lunaDividendToken;\\n  address public deadWallet = 0x000000000000000000000000000000000000dEaD;\\n  address public lunaAddress = 0xf77EEC3c0D006DCF22C7250C196b516B71AD4039; // LUNA Wormhole: 0x156ab3346823B651294766e23e6Cf87254d68962\\n  //bool\\n  bool public marketingSwapSendActive = true;\\n  bool public lunaBurnSwapSendActive = true;\\n  bool public LiqSwapSendActive = true;\\n  bool public swapAndLiquifyEnabled = true;\\n  bool public ProcessDividendStatus = true;\\n  bool public _lunaDividendEnabled = true;\\n  bool public marketActive;\\n  bool public blockMultiBuys = true;\\n  bool public limitSells = true;\\n  bool public limitBuys = true;\\n  bool public feeStatus = true;\\n  bool public buyFeeStatus = true;\\n  bool public sellFeeStatus = true;\\n  bool public maxWallet = true;\\n  bool private isInternalTransaction;\\n\\n  //uint\\n  uint256 public buySecondsLimit = 3;\\n  uint256 public minimumWeiForTokenomics = 1 * 10**17; // 0.1 bnb\\n  uint256 public maxBuyTxAmount; // 1% tot supply (constructor)\\n  uint256 public maxSellTxAmount; // 1% tot supply (constructor)\\n  uint256 public minimumTokensBeforeSwap = 10_000_000 * 10**decimals();\\n  uint256 public tokensToSwap = 10_000_000 * 10**decimals();\\n  uint256 public intervalSecondsForSwap = 20;\\n  uint256 public LUNARewardsBuyFee = 2;\\n  uint256 public LUNARewardsSellFee = 2;\\n  uint256 public LUNABurnBuyFee = 1;\\n  uint256 public LUNABurnSellFee = 1;\\n  uint256 public marketingBuyFee = 2;\\n  uint256 public marketingSellFee = 2;\\n  uint256 public burnSellFee = 1;\\n  uint256 public burnBuyFee = 1;\\n  uint256 public liqBuyFee = 1;\\n  uint256 public liqSellFee = 1;\\n  uint256 public devBuyFee = 1;\\n  uint256 public devSellFee = 1;\\n  uint256 public totalBuyFees =\\n    LUNARewardsBuyFee\\n      .add(marketingBuyFee)\\n      .add(liqBuyFee)\\n      .add(burnBuyFee)\\n      .add(LUNABurnBuyFee)\\n      .add(devBuyFee);\\n  uint256 public totalSellFees =\\n    LUNARewardsSellFee\\n      .add(marketingSellFee)\\n      .add(liqSellFee)\\n      .add(burnSellFee)\\n      .add(LUNABurnSellFee)\\n      .add(devSellFee);\\n  uint256 public gasForProcessing = 300000;\\n  uint256 public maxWalletAmount; // 1% tot supply (constructor)\\n  uint256 private startTimeForSwap;\\n  uint256 private marketActiveAt;\\n\\n  //struct\\n  struct userData {\\n    uint256 lastBuyTime;\\n  }\\n\\n  //mapping\\n  mapping(address => bool) public premarketUser;\\n  mapping(address => bool) public excludedFromFees;\\n  mapping(address => bool) public automatedMarketMakerPairs;\\n  mapping(address => bool) public excludedFromMaxWallet;\\n  mapping(address => userData) public userLastTradeData;\\n  //event\\n  event Update_lunaDividendTracker(\\n    address indexed newAddress,\\n    address indexed oldAddress\\n  );\\n\\n  event UpdateUniswapV2Router(\\n    address indexed newAddress,\\n    address indexed oldAddress\\n  );\\n\\n  event SwapAndLiquifyEnabledUpdated(bool enabled);\\n  event MarketingEnabledUpdated(bool enabled);\\n  event _LUNADividendEnabledUpdated(bool enabled);\\n\\n  event ExcludeFromFees(address indexed account, bool isExcluded);\\n  event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n\\n  event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\n  event MarketingWalletUpdated(\\n    address indexed newMarketingWallet,\\n    address indexed oldMarketingWallet\\n  );\\n\\n  event GasForProcessingUpdated(\\n    uint256 indexed newValue,\\n    uint256 indexed oldValue\\n  );\\n\\n  event SwapAndLiquify(\\n    uint256 tokensSwapped,\\n    uint256 bnbReceived,\\n    uint256 tokensIntoLiqudity\\n  );\\n\\n  event SendDividends(uint256 amount);\\n\\n  event Processed_lunaDividendTracker(\\n    uint256 iterations,\\n    uint256 claims,\\n    uint256 lastProcessedIndex,\\n    bool indexed automatic,\\n    uint256 gas,\\n    address indexed processor\\n  );\\n  event MarketingFeeCollected(uint256 amount);\\n  event LunaBurnFeeCollected(uint256 amount);\\n  event ExcludedFromMaxWalletChanged(address indexed user, bool state);\\n\\n  constructor() ERC20(\\\"TestNet_LunaMoon_V0_1\\\", \\\"LunaMN01\\\") {\\n    uint256 _total_supply = 10_000_000_000 * (10**9);\\n    _lunaDividendToken = lunaAddress;\\n\\n    _lunaDividendTracker = new _LUNADividendTracker(_lunaDividendToken);\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n      0x881703b8A543cc2Fc24c38718F1F725B579381c4\\n    );\\n    address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n      .createPair(address(this), _uniswapV2Router.WETH());\\n\\n    uniswapV2Router = _uniswapV2Router;\\n    uniswapV2Pair = _uniswapV2Pair;\\n\\n    _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\n\\n    excludeFromDividend(address(_lunaDividendTracker));\\n    excludeFromDividend(address(this));\\n    excludeFromDividend(address(_uniswapV2Router));\\n    excludeFromDividend(deadWallet);\\n    excludeFromDividend(owner());\\n\\n    excludeFromFees(marketingWallet, true);\\n    excludeFromFees(liqWallet, true);\\n    excludeFromFees(address(this), true);\\n    excludeFromFees(deadWallet, true);\\n    excludeFromFees(owner(), true);\\n\\n    excludedFromMaxWallet[marketingWallet] = true;\\n    excludedFromMaxWallet[liqWallet] = true;\\n    excludedFromMaxWallet[address(this)] = true;\\n    excludedFromMaxWallet[deadWallet] = true;\\n    excludedFromMaxWallet[owner()] = true;\\n    excludedFromMaxWallet[address(_uniswapV2Pair)] = true;\\n\\n    premarketUser[owner()] = true;\\n    premarketUser[marketingWallet] = true;\\n    premarketUser[liqWallet] = true;\\n    setAuthOnDividends(owner());\\n    /*\\n            _mint is an internal function in ERC20.sol that is only called here,\\n            and CANNOT be called ever again\\n        */\\n    _mint(owner(), _total_supply);\\n    maxSellTxAmount = _total_supply / 100; // 1%\\n    maxBuyTxAmount = _total_supply / 100; // 1%\\n    maxWalletAmount = _total_supply / 100; // 1%\\n    KKPunish(); // used at deploy and never called anymore\\n  }\\n\\n  receive() external payable {}\\n\\n  modifier sameSize(uint256 list1, uint256 list2) {\\n    require(list1 == list2, \\\"lists must have same size\\\");\\n    _;\\n  }\\n\\n  function KKPunish() private {\\n    LUNARewardsBuyFee = 20;\\n    LUNARewardsSellFee = 20;\\n    LUNABurnBuyFee = 10;\\n    LUNABurnSellFee = 10;\\n    marketingBuyFee = 20;\\n    marketingSellFee = 20;\\n    burnSellFee = 20;\\n    burnBuyFee = 20;\\n    liqBuyFee = 10;\\n    liqSellFee = 10;\\n    devBuyFee = 18;\\n    devSellFee = 18;\\n    totalBuyFees = LUNARewardsBuyFee\\n      .add(marketingBuyFee)\\n      .add(liqBuyFee)\\n      .add(burnBuyFee)\\n      .add(LUNABurnBuyFee)\\n      .add(devBuyFee);\\n    totalSellFees = LUNARewardsSellFee\\n      .add(marketingSellFee)\\n      .add(liqSellFee)\\n      .add(burnSellFee)\\n      .add(LUNABurnSellFee)\\n      .add(devSellFee);\\n  }\\n\\n  function prepareForLaunch() external onlyOwner {\\n    LUNARewardsBuyFee = 2;\\n    LUNARewardsSellFee = 2;\\n    LUNABurnBuyFee = 1;\\n    LUNABurnSellFee = 1;\\n    marketingBuyFee = 2;\\n    marketingSellFee = 2;\\n    burnSellFee = 1;\\n    burnBuyFee = 1;\\n    liqBuyFee = 1;\\n    liqSellFee = 1;\\n    devBuyFee = 1;\\n    devSellFee = 1;\\n    totalBuyFees = LUNARewardsBuyFee\\n      .add(marketingBuyFee)\\n      .add(liqBuyFee)\\n      .add(burnBuyFee)\\n      .add(LUNABurnBuyFee)\\n      .add(devBuyFee);\\n    totalSellFees = LUNARewardsSellFee\\n      .add(marketingSellFee)\\n      .add(liqSellFee)\\n      .add(burnSellFee)\\n      .add(LUNABurnSellFee)\\n      .add(devSellFee);\\n  }\\n\\n  function setProcessDividendStatus(bool _active) external onlyOwner {\\n    ProcessDividendStatus = _active;\\n  }\\n\\n  function setLunaAddress(address newAddress) external onlyOwner {\\n    lunaAddress = newAddress;\\n  }\\n\\n  function setSwapAndLiquify(\\n    bool _state,\\n    uint256 _intervalSecondsForSwap,\\n    uint256 _minimumTokensBeforeSwap,\\n    uint256 _tokensToSwap\\n  ) external onlyOwner {\\n    swapAndLiquifyEnabled = _state;\\n    intervalSecondsForSwap = _intervalSecondsForSwap;\\n    minimumTokensBeforeSwap = _minimumTokensBeforeSwap * 10**decimals();\\n    tokensToSwap = _tokensToSwap * 10**decimals();\\n    require(\\n      tokensToSwap <= minimumTokensBeforeSwap,\\n      \\\"You cannot swap more than the minimum amount\\\"\\n    );\\n    require(\\n      tokensToSwap <= totalSupply() / 1000,\\n      \\\"token to swap limited to 0.1% supply\\\"\\n    );\\n  }\\n\\n  function setSwapSend(\\n    bool _marketing,\\n    bool _liq,\\n    bool _burn\\n  ) external onlyOwner {\\n    marketingSwapSendActive = _marketing;\\n    LiqSwapSendActive = _liq;\\n    lunaBurnSwapSendActive = _burn;\\n  }\\n\\n  function setMultiBlock(bool _state) external onlyOwner {\\n    blockMultiBuys = _state;\\n  }\\n\\n  function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n      address(this),\\n      tokenAmount,\\n      0,\\n      0,\\n      liqWallet,\\n      block.timestamp\\n    );\\n  }\\n\\n  function setFeesDetails(\\n    bool _feeStatus,\\n    bool _buyFeeStatus,\\n    bool _sellFeeStatus\\n  ) external onlyOwner {\\n    feeStatus = _feeStatus;\\n    buyFeeStatus = _buyFeeStatus;\\n    sellFeeStatus = _sellFeeStatus;\\n  }\\n\\n  function setMaxTxAmount(uint256 _buy, uint256 _sell) external onlyOwner {\\n    maxBuyTxAmount = _buy * 10**decimals();\\n    maxSellTxAmount = _sell * 10**decimals();\\n    require(\\n      maxBuyTxAmount >= totalSupply() / 1000,\\n      \\\"maxBuyTxAmount should be at least 0.1% of total supply.\\\"\\n    );\\n    require(\\n      maxSellTxAmount >= totalSupply() / 1000,\\n      \\\"maxSellTxAmount should be at least 0.1% of total supply.\\\"\\n    );\\n  }\\n\\n  function setBuySecondLimits(uint256 buy) external onlyOwner {\\n    buySecondsLimit = buy;\\n  }\\n\\n  function activateMarket(bool active) external onlyOwner {\\n    require(marketActive == false);\\n    marketActive = active;\\n    if (marketActive) {\\n      marketActiveAt = block.timestamp;\\n    }\\n  }\\n\\n  function editLimits(bool buy, bool sell) external onlyOwner {\\n    limitSells = sell;\\n    limitBuys = buy;\\n  }\\n\\n  function setMinimumWeiForTokenomics(uint256 _value) external onlyOwner {\\n    minimumWeiForTokenomics = _value;\\n  }\\n\\n  function editPreMarketUser(address _address, bool active) external onlyOwner {\\n    premarketUser[_address] = active;\\n  }\\n\\n  function transferForeignToken(\\n    address _token,\\n    address _to,\\n    uint256 _value\\n  ) external onlyOwner returns (bool _sent) {\\n    if (_value == 0) {\\n      _value = IERC20(_token).balanceOf(address(this));\\n    }\\n    _sent = IERC20(_token).transfer(_to, _value);\\n  }\\n\\n  function Sweep() external onlyOwner {\\n    uint256 balance = address(this).balance;\\n    payable(owner()).transfer(balance);\\n  }\\n\\n  function edit_excludeFromFees(address account, bool excluded)\\n    public\\n    onlyOwner\\n  {\\n    excludedFromFees[account] = excluded;\\n\\n    emit ExcludeFromFees(account, excluded);\\n  }\\n\\n  function excludeMultipleAccountsFromFees(\\n    address[] calldata accounts,\\n    bool excluded\\n  ) public onlyOwner {\\n    for (uint256 i = 0; i < accounts.length; i++) {\\n      excludedFromFees[accounts[i]] = excluded;\\n    }\\n\\n    emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\n  }\\n\\n  function setMarketingWallet(address payable wallet) external onlyOwner {\\n    marketingWallet = wallet;\\n  }\\n\\n  function setMaxWallet(bool state, uint256 max) public onlyOwner {\\n    maxWallet = state;\\n    maxWalletAmount = max * 10**decimals();\\n    require(\\n      maxWalletAmount >= totalSupply() / 100,\\n      \\\"max wallet min amount: 1%\\\"\\n    );\\n  }\\n\\n  function editExcludedFromMaxWallet(address user, bool state)\\n    external\\n    onlyOwner\\n  {\\n    excludedFromMaxWallet[user] = state;\\n    emit ExcludedFromMaxWalletChanged(user, state);\\n  }\\n\\n  function editMultiExcludedFromMaxWallet(\\n    address[] memory _address,\\n    bool[] memory _states\\n  ) external onlyOwner sameSize(_address.length, _states.length) {\\n    for (uint256 i = 0; i < _states.length; i++) {\\n      excludedFromMaxWallet[_address[i]] = _states[i];\\n      emit ExcludedFromMaxWalletChanged(_address[i], _states[i]);\\n    }\\n  }\\n\\n  function setliqWallet(address newWallet) external onlyOwner {\\n    liqWallet = newWallet;\\n  }\\n\\n  function setBuyFees(\\n    uint256 _reward_buy,\\n    uint256 _liq_buy,\\n    uint256 _marketing_buy,\\n    uint256 _luna_burn_buy,\\n    uint256 _burn_buy,\\n    uint256 _dev_buy\\n  ) external onlyOwner {\\n    LUNARewardsBuyFee = _reward_buy;\\n    LUNABurnBuyFee = _luna_burn_buy;\\n    burnBuyFee = _burn_buy;\\n    liqBuyFee = _liq_buy;\\n    marketingBuyFee = _marketing_buy;\\n    devBuyFee = _dev_buy;\\n    totalBuyFees = LUNARewardsBuyFee\\n      .add(marketingBuyFee)\\n      .add(liqBuyFee)\\n      .add(burnBuyFee)\\n      .add(LUNABurnBuyFee)\\n      .add(devBuyFee);\\n    totalSellFees = LUNARewardsSellFee\\n      .add(marketingSellFee)\\n      .add(liqSellFee)\\n      .add(burnSellFee)\\n      .add(LUNABurnSellFee)\\n      .add(devSellFee);\\n    totalBuyFees > 0 ? buyFeeStatus = true : buyFeeStatus = false;\\n    totalSellFees > 0 ? sellFeeStatus = true : sellFeeStatus = false;\\n    require(\\n      totalBuyFees + totalSellFees < 25,\\n      \\\"you cannot set fees more then 25%\\\"\\n    );\\n  }\\n\\n  function setSellFees(\\n    uint256 _reward_sell,\\n    uint256 _liq_sell,\\n    uint256 _marketing_sell,\\n    uint256 _luna_burn_sell,\\n    uint256 _burn_sell,\\n    uint256 _dev_sell\\n  ) external onlyOwner {\\n    LUNARewardsSellFee = _reward_sell;\\n    LUNABurnSellFee = _luna_burn_sell;\\n    burnSellFee = _burn_sell;\\n    liqSellFee = _liq_sell;\\n    marketingSellFee = _marketing_sell;\\n    devSellFee = _dev_sell;\\n    totalBuyFees = LUNARewardsBuyFee\\n      .add(marketingBuyFee)\\n      .add(liqBuyFee)\\n      .add(burnBuyFee)\\n      .add(LUNABurnBuyFee)\\n      .add(devBuyFee);\\n    totalSellFees = LUNARewardsSellFee\\n      .add(marketingSellFee)\\n      .add(liqSellFee)\\n      .add(burnSellFee)\\n      .add(LUNABurnSellFee)\\n      .add(devSellFee);\\n    totalBuyFees > 0 ? buyFeeStatus = true : buyFeeStatus = false;\\n    totalSellFees > 0 ? sellFeeStatus = true : sellFeeStatus = false;\\n    require(\\n      totalBuyFees + totalSellFees < 25,\\n      \\\"you cannot set fees more then 25%\\\"\\n    );\\n  }\\n\\n  function KKAirdrop(address[] memory _address, uint256[] memory _amount)\\n    external\\n    onlyOwner\\n  {\\n    for (uint256 i = 0; i < _amount.length; i++) {\\n      address adr = _address[i];\\n      uint256 amnt = _amount[i] * 10**decimals();\\n      super._transfer(owner(), adr, amnt);\\n      try\\n        _lunaDividendTracker.setBalance(payable(adr), balanceOf(adr))\\n      {} catch {}\\n    }\\n  }\\n\\n  function swapTokens(uint256 minTknBfSwap) private {\\n    isInternalTransaction = true;\\n    uint256 LUNABalance = (LUNARewardsSellFee * minTknBfSwap) / 100;\\n    uint256 burnPart = (burnSellFee * minTknBfSwap) / 100;\\n    uint256 liqPart = ((liqSellFee * minTknBfSwap) / 100) / 2;\\n    uint256 swapBalance = minTknBfSwap - LUNABalance - burnPart - (liqPart);\\n\\n    swapTokensForBNB(swapBalance);\\n    super._transfer(address(this), lunaBurnWallet, burnPart);\\n    uint256 balancez = address(this).balance;\\n\\n    if (marketingSwapSendActive && marketingSellFee > 0) {\\n      uint256 marketingBnb = balancez.mul(marketingSellFee).div(totalSellFees);\\n      (bool success, ) = address(marketingWallet).call{value: marketingBnb}(\\\"\\\");\\n      if (success) {\\n        emit MarketingFeeCollected(marketingBnb);\\n      }\\n      balancez -= marketingBnb;\\n    }\\n    if (lunaBurnSwapSendActive && LUNABurnSellFee > 0) {\\n      uint256 lunaBurnBnb = balancez.mul(LUNABurnSellFee).div(totalSellFees);\\n      (bool success, ) = address(lunaBurnWallet).call{value: lunaBurnBnb}(\\\"\\\");\\n      if (success) {\\n        emit LunaBurnFeeCollected(lunaBurnBnb);\\n      }\\n      balancez -= lunaBurnBnb;\\n    }\\n    if (LiqSwapSendActive) {\\n      uint256 liqBnb = balancez.mul(liqSellFee).div(totalSellFees);\\n      if (liqBnb > 5) {\\n        // failsafe if addLiq is too low\\n        addLiquidity(liqPart, liqBnb);\\n        balancez -= liqBnb;\\n      }\\n    }\\n    if (ProcessDividendStatus) {\\n      if (balancez > 10000000000) {\\n        // 0,00000001 BNB\\n        swapBNBforLuna(balancez);\\n        uint256 DividendsPart = IERC20(_lunaDividendToken).balanceOf(\\n          address(this)\\n        );\\n        transferDividends(\\n          _lunaDividendToken,\\n          address(_lunaDividendTracker),\\n          _lunaDividendTracker,\\n          DividendsPart\\n        );\\n      }\\n    }\\n    isInternalTransaction = false;\\n  }\\n\\n  function prepareForPartnerOrExchangeListing(address _partnerOrExchangeAddress)\\n    external\\n    onlyOwner\\n  {\\n    _lunaDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\\n    excludeFromFees(_partnerOrExchangeAddress, true);\\n    excludedFromMaxWallet[_partnerOrExchangeAddress] = true;\\n  }\\n\\n  function updateMarketingWallet(address _newWallet) external onlyOwner {\\n    require(\\n      _newWallet != marketingWallet,\\n      \\\"Luna: The marketing wallet is already this address\\\"\\n    );\\n    excludeFromFees(_newWallet, true);\\n    emit MarketingWalletUpdated(marketingWallet, _newWallet);\\n    marketingWallet = _newWallet;\\n  }\\n\\n  function updateLiqWallet(address _newWallet) external onlyOwner {\\n    require(\\n      _newWallet != liqWallet,\\n      \\\"Luna: The liquidity Wallet is already this address\\\"\\n    );\\n    excludeFromFees(_newWallet, true);\\n    liqWallet = _newWallet;\\n  }\\n\\n  function setAuthOnDividends(address account) public onlyOwner {\\n    _lunaDividendTracker.setAuth(account);\\n  }\\n\\n  function set_LUNADividendEnabled(bool _enabled) external onlyOwner {\\n    _lunaDividendEnabled = _enabled;\\n  }\\n\\n  function update_lunaDividendTracker(address newAddress) external onlyOwner {\\n    require(\\n      newAddress != address(_lunaDividendTracker),\\n      \\\"Luna: The dividend tracker already has that address\\\"\\n    );\\n    _LUNADividendTracker new_lunaDividendTracker = _LUNADividendTracker(\\n      payable(newAddress)\\n    );\\n    require(\\n      new_lunaDividendTracker.owner() == address(this),\\n      \\\"Luna: The new dividend tracker must be owned by the Luna token contract\\\"\\n    );\\n    new_lunaDividendTracker.excludeFromDividends(\\n      address(new_lunaDividendTracker)\\n    );\\n    new_lunaDividendTracker.excludeFromDividends(address(this));\\n    new_lunaDividendTracker.excludeFromDividends(address(uniswapV2Router));\\n    new_lunaDividendTracker.excludeFromDividends(address(deadWallet));\\n    emit Update_lunaDividendTracker(newAddress, address(_lunaDividendTracker));\\n    _lunaDividendTracker = new_lunaDividendTracker;\\n  }\\n\\n  function updateUniswapV2Router(address newAddress) external onlyOwner {\\n    require(\\n      newAddress != address(uniswapV2Router),\\n      \\\"Luna: The router already has that address\\\"\\n    );\\n    emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\n    uniswapV2Router = IUniswapV2Router02(newAddress);\\n  }\\n\\n  function excludeFromFees(address account, bool excluded) public onlyOwner {\\n    excludedFromFees[account] = excluded;\\n    emit ExcludeFromFees(account, excluded);\\n  }\\n\\n  function excludeFromDividend(address account) public onlyOwner {\\n    _lunaDividendTracker.excludeFromDividends(address(account));\\n  }\\n\\n  function setAutomatedMarketMakerPair(address pair, bool value)\\n    public\\n    onlyOwner\\n  {\\n    require(\\n      pair != uniswapV2Pair,\\n      \\\"Luna: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\"\\n    );\\n    _setAutomatedMarketMakerPair(pair, value);\\n  }\\n\\n  function _setAutomatedMarketMakerPair(address pair, bool value)\\n    private\\n    onlyOwner\\n  {\\n    require(\\n      automatedMarketMakerPairs[pair] != value,\\n      \\\"Luna: Automated market maker pair is already set to that value\\\"\\n    );\\n    automatedMarketMakerPairs[pair] = value;\\n    if (value) {\\n      _lunaDividendTracker.excludeFromDividends(pair);\\n    }\\n    emit SetAutomatedMarketMakerPair(pair, value);\\n  }\\n\\n  function updateGasForProcessing(uint256 newValue) external onlyOwner {\\n    require(\\n      newValue != gasForProcessing,\\n      \\\"Luna: Cannot update gasForProcessing to same value\\\"\\n    );\\n    gasForProcessing = newValue;\\n    emit GasForProcessingUpdated(newValue, gasForProcessing);\\n  }\\n\\n  function updateMinimumBalanceForDividends(uint256 newMinimumBalance)\\n    external\\n    onlyOwner\\n  {\\n    _lunaDividendTracker.updateMinimumTokenBalanceForDividends(\\n      newMinimumBalance\\n    );\\n  }\\n\\n  function updateClaimWait(uint256 claimWait) external onlyOwner {\\n    _lunaDividendTracker.updateClaimWait(claimWait);\\n  }\\n\\n  function getLUNAClaimWait() external view returns (uint256) {\\n    return _lunaDividendTracker.claimWait();\\n  }\\n\\n  function getTotal_LUNADividendsDistributed() external view returns (uint256) {\\n    return _lunaDividendTracker.totalDividendsDistributed();\\n  }\\n\\n  function withdrawable_LUNADividendOf(address account)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _lunaDividendTracker.withdrawableDividendOf(account);\\n  }\\n\\n  function _lunaDividendTokenBalanceOf(address account)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _lunaDividendTracker.balanceOf(account);\\n  }\\n\\n  function getAccount_LUNADividendsInfo(address account)\\n    external\\n    view\\n    returns (\\n      address,\\n      int256,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return _lunaDividendTracker.getAccount(account);\\n  }\\n\\n  function getAccount_LUNADividendsInfoAtIndex(uint256 index)\\n    external\\n    view\\n    returns (\\n      address,\\n      int256,\\n      int256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return _lunaDividendTracker.getAccountAtIndex(index);\\n  }\\n\\n  function processDividendTracker(uint256 gas) public onlyOwner {\\n    (\\n      uint256 lunaIterations,\\n      uint256 lunaClaims,\\n      uint256 lunaLastProcessedIndex\\n    ) = _lunaDividendTracker.process(gas);\\n    emit Processed_lunaDividendTracker(\\n      lunaIterations,\\n      lunaClaims,\\n      lunaLastProcessedIndex,\\n      false,\\n      gas,\\n      tx.origin\\n    );\\n  }\\n\\n  function update_LUNADividendToken(address _newContract, uint256 gas)\\n    external\\n    onlyOwner\\n  {\\n    _lunaDividendTracker.process(gas); //test\\n    _lunaDividendToken = _newContract;\\n    _lunaDividendTracker.setDividendTokenAddress(_newContract);\\n  }\\n\\n  function claim() external {\\n    _lunaDividendTracker.processAccount(payable(msg.sender), false);\\n  }\\n\\n  function getLast_LUNADividendProcessedIndex()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _lunaDividendTracker.getLastProcessedIndex();\\n  }\\n\\n  function getNumberOf_LUNADividendTokenHolders()\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return _lunaDividendTracker.getNumberOfTokenHolders();\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override {\\n    //tx utility vars\\n    uint256 trade_type = 0;\\n    bool overMinimumTokenBalance = balanceOf(address(this)) >=\\n      minimumTokensBeforeSwap;\\n    // market status flag\\n    if (!marketActive) {\\n      require(premarketUser[from], \\\"cannot trade before the market opening\\\");\\n    }\\n    // normal transaction\\n    if (!isInternalTransaction) {\\n      // tx limits & tokenomics\\n      //buy\\n      if (automatedMarketMakerPairs[from]) {\\n        trade_type = 1;\\n        // limits\\n        if (!excludedFromFees[to]) {\\n          // tx limit\\n          if (limitBuys) {\\n            require(amount <= maxBuyTxAmount, \\\"maxBuyTxAmount Limit Exceeded\\\");\\n          }\\n          // multi-buy limit\\n          if (marketActiveAt + 30 < block.timestamp) {\\n            require(\\n              marketActiveAt + 7 < block.timestamp,\\n              \\\"You cannot buy at launch.\\\"\\n            );\\n            require(\\n              userLastTradeData[to].lastBuyTime + buySecondsLimit <=\\n                block.timestamp,\\n              \\\"You cannot do multi-buy orders.\\\"\\n            );\\n            userLastTradeData[to].lastBuyTime = block.timestamp;\\n          }\\n        }\\n      }\\n      //sell\\n      else if (automatedMarketMakerPairs[to]) {\\n        trade_type = 2;\\n        // liquidity generator for tokenomics\\n        if (\\n          swapAndLiquifyEnabled && balanceOf(uniswapV2Pair) > 0 && sellFeeStatus\\n        ) {\\n          if (\\n            overMinimumTokenBalance &&\\n            startTimeForSwap + intervalSecondsForSwap <= block.timestamp\\n          ) {\\n            startTimeForSwap = block.timestamp;\\n            // sell to bnb\\n            swapTokens(tokensToSwap);\\n          }\\n        }\\n        // limits\\n        if (!excludedFromFees[from]) {\\n          // tx limit\\n          if (limitSells) {\\n            require(\\n              amount <= maxSellTxAmount,\\n              \\\"maxSellTxAmount Limit Exceeded\\\"\\n            );\\n          }\\n        }\\n      }\\n      // max wallet\\n      if (maxWallet) {\\n        require(\\n          balanceOf(to) + amount <= maxWalletAmount ||\\n            excludedFromMaxWallet[to],\\n          \\\"maxWallet limit\\\"\\n        );\\n      }\\n      // tokenomics\\n      // fees management\\n      if (feeStatus) {\\n        // buy\\n        if (trade_type == 1 && buyFeeStatus && !excludedFromFees[to]) {\\n          uint256 txFees = (amount * totalBuyFees) / 100;\\n          amount -= txFees;\\n          uint256 burnFees = (txFees * burnBuyFee) / totalBuyFees;\\n          super._transfer(from, address(this), txFees);\\n          super._transfer(address(this), deadWallet, burnFees);\\n        }\\n        //sell\\n        else if (trade_type == 2 && sellFeeStatus && !excludedFromFees[from]) {\\n          uint256 txFees = (amount * totalSellFees) / 100;\\n          amount -= txFees;\\n          uint256 burnFees = (txFees * burnSellFee) / totalSellFees;\\n          super._transfer(from, address(this), txFees);\\n          super._transfer(address(this), deadWallet, burnFees);\\n        }\\n        // no wallet to wallet tax\\n      }\\n    }\\n    // transfer tokens\\n    super._transfer(from, to, amount);\\n    //set dividends\\n    try\\n      _lunaDividendTracker.setBalance(payable(from), balanceOf(from))\\n    {} catch {}\\n    try _lunaDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\\n    // auto-claims one time per transaction\\n    if (!isInternalTransaction && ProcessDividendStatus) {\\n      uint256 gas = gasForProcessing;\\n      try _lunaDividendTracker.process(gas) returns (\\n        uint256 iterations,\\n        uint256 claims,\\n        uint256 lastProcessedIndex\\n      ) {\\n        emit Processed_lunaDividendTracker(\\n          iterations,\\n          claims,\\n          lastProcessedIndex,\\n          true,\\n          gas,\\n          tx.origin\\n        );\\n      } catch {}\\n    }\\n  }\\n\\n  function swapTokensForBNB(uint256 tokenAmount) private {\\n    address[] memory path = new address[](2);\\n    path[0] = address(this);\\n    path[1] = uniswapV2Router.WETH();\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n      tokenAmount,\\n      0,\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function swapBNBforLuna(uint256 bnbAmount) private {\\n    address[] memory path = new address[](2);\\n    path[0] = uniswapV2Router.WETH();\\n    path[1] = _lunaDividendToken;\\n    uniswapV2Router.swapExactETHForTokens{value: bnbAmount}(\\n      0,\\n      path,\\n      address(this),\\n      block.timestamp\\n    );\\n  }\\n\\n  function transferDividends(\\n    address dividendToken,\\n    address dividendTracker,\\n    DividendPayingToken dividendPayingTracker,\\n    uint256 amount\\n  ) private {\\n    bool success = IERC20(dividendToken).transfer(dividendTracker, amount);\\n    if (success) {\\n      dividendPayingTracker.distributeDividends(amount);\\n      emit SendDividends(amount);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x050eb071a5b654351931e500fe9bfaeb98df480ec8149f5123f21bffb497ecae\",\"license\":\"MIT\"},\"contracts/access/Ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0xf430bf32c1a2e76edfe3ff83689874b59eaf55623c5dafbba1a784e737a62663\",\"license\":\"MIT\"},\"contracts/math/SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary SafeMath {\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    uint256 c = a + b;\\n    if (c < a) return (false, 0);\\n    return (true, c);\\n  }\\n\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    if (b > a) return (false, 0);\\n    return (true, a - b);\\n  }\\n\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) return (true, 0);\\n    uint256 c = a * b;\\n    if (c / a != b) return (false, 0);\\n    return (true, c);\\n  }\\n\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    if (b == 0) return (false, 0);\\n    return (true, a / b);\\n  }\\n\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    if (b == 0) return (false, 0);\\n    return (true, a % b);\\n  }\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    return a - b;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) return 0;\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    return a / b;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a / b;\\n  }\\n\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x781709e5c814e63c54a4d5745b73575505f2b33dcb989c3553c6508aad3e9a02\",\"license\":\"MIT\"},\"contracts/math/SafeMathInt.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary SafeMathInt {\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    // Prevent overflow when multiplying INT256_MIN with -1\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\n    require(!(a == -2**255 && b == -1) && !(b == -2**255 && a == -1));\\n\\n    int256 c = a * b;\\n    require((b == 0) || (c / b == a));\\n    return c;\\n  }\\n\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    // Prevent overflow when dividing INT256_MIN by -1\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\n    require(!(a == -2**255 && b == -1) && (b > 0));\\n\\n    return a / b;\\n  }\\n\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\\n\\n    return a - b;\\n  }\\n\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\n    int256 c = a + b;\\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\\n    return c;\\n  }\\n\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\n    require(a >= 0);\\n    return uint256(a);\\n  }\\n}\\n\",\"keccak256\":\"0xe06b1f00aa93de631261152a31d3baff7fb80670f27aa49354d853711ac612fc\",\"license\":\"MIT\"},\"contracts/math/SafeMathUint.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary SafeMathUint {\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0);\\n    return b;\\n  }\\n}\\n\",\"keccak256\":\"0x666de5a98638a85918c9a857876469f5eac3673651297870adcd8928acfd1f43\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    address pair,\\n    uint256\\n  );\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n\\n  function allPairs(uint256) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint256);\\n\\n  function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x049492a6ccb4e5f9c673a977e566783ddd538839a3c290aefbcaeb45e37db5df\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Pair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address owner) external view returns (uint256);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function approve(address spender, uint256 value) external returns (bool);\\n\\n  function transfer(address to, uint256 value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint256);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n  event Burn(\\n    address indexed sender,\\n    uint256 amount0,\\n    uint256 amount1,\\n    address indexed to\\n  );\\n  event Swap(\\n    address indexed sender,\\n    uint256 amount0In,\\n    uint256 amount1In,\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n\\n  function kLast() external view returns (uint256);\\n\\n  function mint(address to) external returns (uint256 liquidity);\\n\\n  function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x821137a189b9cfbeb890b4d36e917cef099b2386bdd54ca7d9b4a23163aaa94e\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Router01.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IUniswapV2Router01 {\\n  function addLiquidityETH(\\n    address token,\\n    uint256 amountTokenDesired,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint256 amountToken,\\n      uint256 amountETH,\\n      uint256 liquidity\\n    );\\n\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint256 amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8be76bfc6813baf9f57704a3786ed791bbb0797c1c9fc3b87cd5268539f57f0a\",\"license\":\"MIT\"},\"contracts/uniswap/IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256 amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint256 liquidity,\\n    uint256 amountTokenMin,\\n    uint256 amountETHMin,\\n    address to,\\n    uint256 deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint256 amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n}\\n\",\"keccak256\":\"0xb3921006168d7f9dbf87dc18443f4303280cfd5cbc98e353a1de0b612113cd26\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address payable) {\\n    return payable(msg.sender);\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\",\"keccak256\":\"0x9cb26012b646880b882b4c90775a37eaf8904f2e3ac62ff030bb3e2ce2aa6000\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106106ed5760003560e01c806385141a7711610385578063ba876bb9116101dc578063dd62ed3e1161010d578063ea0f8a88116100ab578063f6823de41161007a578063f6823de41461144c578063f74c9f471461146c578063f8b45b051461148c578063fbe2dbee146114ab57600080fd5b8063ea0f8a88146113cc578063eb924fc0146113ec578063f2cc12561461140c578063f2fde38b1461142c57600080fd5b8063e7109b22116100e7578063e7109b2214611355578063e76ad1f114611375578063e7f444b314611396578063e98030c7146113ac57600080fd5b8063dd62ed3e146112cf578063e0608d1c14611315578063e3762ba81461133557600080fd5b8063c78b71cd1161017a578063d2359e6f11610154578063d2359e6f14611253578063d2d7ad8314611273578063d851fd0d14611289578063dbe66ca01461129f57600080fd5b8063c78b71cd14611207578063cd90ee8914611227578063d0a398141461123d57600080fd5b8063bf2e92c6116101b6578063bf2e92c6146111b1578063c024666814610bf7578063c22629a1146111c7578063c492f046146111e757600080fd5b8063ba876bb914611144578063baea322814611164578063bda258e41461118457600080fd5b8063a1ab19a3116102b6578063ac252bd311610254578063b62496f51161022e578063b62496f5146110c7578063b6c0f672146110f7578063b8b9b98d14611118578063b9e937001461112e57600080fd5b8063ac252bd314611061578063b13f725d14611091578063b45e83f8146110b157600080fd5b8063a9059cbb11610290578063a9059cbb14610fea578063aa4bde281461100a578063aaa3115114611020578063aacebbe31461104157600080fd5b8063a1ab19a314610f9f578063a457c2d714610fb4578063a87e5da414610fd457600080fd5b806395d89b411161032357806399aeacaf116102fd57806399aeacaf14610f295780639a7a23d614610f495780639c1b8af514610f695780639e5fea8a14610f7f57600080fd5b806395d89b4114610ede5780639658159314610ef35780639690979914610f0857600080fd5b80638c5d29861161035f5780638c5d298614610e605780638da5cb5b14610e805780638ef71b1c14610ea3578063958f973514610ebd57600080fd5b806385141a7714610e00578063871c128d14610e2057806389a01def14610e4057600080fd5b80634a74bb02116105445780636807895211610475578063716fce23116104135780637d99f9a4116103e25780637d99f9a414610d845780637e76137714610db45780637fde78b314610dca5780638073f8b314610dea57600080fd5b8063716fce2314610d1857806373dd858c14610d2e57806375f0a87414610d4e5780637ae3ff4714610d6e57600080fd5b8063700bb1911161044f578063700bb19114610cae5780637088fb7f14610cce57806370a0823114610ce3578063715018a614610d0357600080fd5b80636807895214610c575780636d052ede14610c6d5780636e1f264514610c8e57600080fd5b8063590b6929116104e25780635d098b38116104bc5780635d098b3814610bd75780635d942e8f14610bf757806365acb9a914610c1757806365b8dbc014610c3757600080fd5b8063590b692914610b8a5780635b3c6e0114610ba05780635c67ed9c14610bc157600080fd5b80634ec39ba91161051e5780634ec39ba914610b0a5780634f97f4c114610b2a578063509072b614610b4a5780635512ac4214610b6a57600080fd5b80634a74bb0214610ab35780634b63d4b214610ad45780634e71d92d14610af557600080fd5b80632e4316ae1161061e57806339509351116105bc57806342ced7b71161059657806342ced7b714610a3e57806345ce7d4514610a5e5780634742f95214610a7357806349bd5a5e14610a9357600080fd5b806339509351146109de5780633b364da8146109fe5780633bbdd8fb14610a1e57600080fd5b8063313ce567116105f8578063313ce5671461091d5780633395155e1461093957806333d0158614610959578063358f65751461097957600080fd5b80632e4316ae146108d15780632ecf3ea0146108e7578063300425be146108fc57600080fd5b80631bf5123f1161068b578063272ecbb311610665578063272ecbb3146108635780632730bb7c14610879578063298f9930146108995780632b893929146108bb57600080fd5b80631bf5123f146108025780631cb58f391461082357806323b872dd1461084357600080fd5b806312561dd1116106c757806312561dd1146107745780631694505e146107ac57806318160ddd146107cc5780631a29c9d3146107e157600080fd5b806301143fea146106f957806306fdde0314610722578063095ea7b31461074457600080fd5b366106f457005b600080fd5b34801561070557600080fd5b5061070f60215481565b6040519081526020015b60405180910390f35b34801561072e57600080fd5b506107376114c0565b6040516107199190614dd4565b34801561075057600080fd5b5061076461075f366004614e3e565b611552565b6040519015158152602001610719565b34801561078057600080fd5b50600a54610794906001600160a01b031681565b6040516001600160a01b039091168152602001610719565b3480156107b857600080fd5b50600654610794906001600160a01b031681565b3480156107d857600080fd5b5060025461070f565b3480156107ed57600080fd5b50600e5461076490600160e01b900460ff1681565b34801561080e57600080fd5b50600e5461076490600160c81b900460ff1681565b34801561082f57600080fd5b50600c54610794906001600160a01b031681565b34801561084f57600080fd5b5061076461085e366004614e6a565b611569565b34801561086f57600080fd5b5061070f60165481565b34801561088557600080fd5b50600e54610794906001600160a01b031681565b3480156108a557600080fd5b506108b96108b4366004614eb9565b6115d2565b005b3480156108c757600080fd5b5061070f60155481565b3480156108dd57600080fd5b5061070f60175481565b3480156108f357600080fd5b5061070f61166b565b34801561090857600080fd5b50600e5461076490600160a01b900460ff1681565b34801561092957600080fd5b5060405160098152602001610719565b34801561094557600080fd5b506108b9610954366004614ef2565b6116de565b34801561096557600080fd5b506108b9610974366004614ef2565b61179c565b34801561098557600080fd5b50610999610994366004614f0f565b61182f565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610719565b3480156109ea57600080fd5b506107646109f9366004614e3e565b6118ca565b348015610a0a57600080fd5b506108b9610a19366004614f0f565b611900565b348015610a2a57600080fd5b506108b9610a39366004614f28565b611961565b348015610a4a57600080fd5b506108b9610a59366004614ef2565b611a28565b348015610a6a57600080fd5b5061070f611a7a565b348015610a7f57600080fd5b506108b9610a8e366004614ef2565b611ac4565b348015610a9f57600080fd5b50600854610794906001600160a01b031681565b348015610abf57600080fd5b50600e5461076490600160b81b900460ff1681565b348015610ae057600080fd5b50600e5461076490600160a81b900460ff1681565b348015610b0157600080fd5b506108b9611b16565b348015610b1657600080fd5b50600b54610794906001600160a01b031681565b348015610b3657600080fd5b506108b9610b45366004614f46565b611b8e565b348015610b5657600080fd5b506108b9610b65366004615060565b611cee565b348015610b7657600080fd5b5061070f610b85366004614ef2565b611e32565b348015610b9657600080fd5b5061070f60185481565b348015610bac57600080fd5b50600e5461076490600160d81b900460ff1681565b348015610bcd57600080fd5b5061070f60115481565b348015610be357600080fd5b506108b9610bf2366004614ef2565b611ea2565b348015610c0357600080fd5b506108b9610c12366004614eb9565b611ef4565b348015610c2357600080fd5b506108b9610c3236600461511b565b611f7c565b348015610c4357600080fd5b506108b9610c52366004614ef2565b6120f8565b348015610c6357600080fd5b5061070f601b5481565b348015610c7957600080fd5b50600e5461076490600160e81b900460ff1681565b348015610c9a57600080fd5b506108b9610ca9366004614eb9565b6121f5565b348015610cba57600080fd5b506108b9610cc9366004614f0f565b612250565b348015610cda57600080fd5b506108b9612352565b348015610cef57600080fd5b5061070f610cfe366004614ef2565b6123c1565b348015610d0f57600080fd5b506108b96123dc565b348015610d2457600080fd5b5061070f60195481565b348015610d3a57600080fd5b506108b9610d49366004614ef2565b61245c565b348015610d5a57600080fd5b50600954610794906001600160a01b031681565b348015610d7a57600080fd5b5061070f601e5481565b348015610d9057600080fd5b50610764610d9f366004614ef2565b602c6020526000908152604090205460ff1681565b348015610dc057600080fd5b5061070f601d5481565b348015610dd657600080fd5b506108b9610de536600461513d565b612510565b348015610df657600080fd5b5061070f601f5481565b348015610e0c57600080fd5b50600d54610794906001600160a01b031681565b348015610e2c57600080fd5b506108b9610e3b366004614f0f565b61255e565b348015610e4c57600080fd5b506108b9610e5b366004614f0f565b61262f565b348015610e6c57600080fd5b506108b9610e7b36600461513d565b612664565b348015610e8c57600080fd5b5060055461010090046001600160a01b0316610794565b348015610eaf57600080fd5b50600f546107649060ff1681565b348015610ec957600080fd5b50600e5461076490600160f01b900460ff1681565b348015610eea57600080fd5b506107376126b2565b348015610eff57600080fd5b5061070f6126c1565b348015610f1457600080fd5b50600e5461076490600160c01b900460ff1681565b348015610f3557600080fd5b506108b9610f4436600461515a565b61270b565b348015610f5557600080fd5b506108b9610f64366004614eb9565b612892565b348015610f7557600080fd5b5061070f60255481565b348015610f8b57600080fd5b50610764610f9a366004614e6a565b612964565b348015610fab57600080fd5b506108b9612a85565b348015610fc057600080fd5b50610764610fcf366004614e3e565b612b4f565b348015610fe057600080fd5b5061070f60125481565b348015610ff657600080fd5b50610764611005366004614e3e565b612b9e565b34801561101657600080fd5b5061070f60265481565b34801561102c57600080fd5b50600e5461076490600160d01b900460ff1681565b34801561104d57600080fd5b506108b961105c366004614ef2565b612bab565b34801561106d57600080fd5b5061076461107c366004614ef2565b60296020526000908152604090205460ff1681565b34801561109d57600080fd5b506108b96110ac366004614ef2565b612cbb565b3480156110bd57600080fd5b5061070f60225481565b3480156110d357600080fd5b506107646110e2366004614ef2565b602b6020526000908152604090205460ff1681565b34801561110357600080fd5b50600e5461076490600160b01b900460ff1681565b34801561112457600080fd5b5061070f601a5481565b34801561113a57600080fd5b5061070f60235481565b34801561115057600080fd5b506108b961115f36600461520f565b612d1d565b34801561117057600080fd5b506108b961117f366004614e3e565b612ea2565b34801561119057600080fd5b5061070f61119f366004614ef2565b602d6020526000908152604090205481565b3480156111bd57600080fd5b5061070f60105481565b3480156111d357600080fd5b506108b96111e2366004615252565b612fba565b3480156111f357600080fd5b506108b961120236600461529d565b613035565b34801561121357600080fd5b506108b9611222366004614f0f565b613117565b34801561123357600080fd5b5061070f60205481565b34801561124957600080fd5b5061070f60245481565b34801561125f57600080fd5b506108b961126e366004615252565b61314c565b34801561127f57600080fd5b5061070f60145481565b34801561129557600080fd5b5061070f60135481565b3480156112ab57600080fd5b506107646112ba366004614ef2565b602a6020526000908152604090205460ff1681565b3480156112db57600080fd5b5061070f6112ea366004615318565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561132157600080fd5b5061070f611330366004614ef2565b6131c8565b34801561134157600080fd5b506108b961135036600461513d565b6131fb565b34801561136157600080fd5b50610999611370366004614ef2565b613249565b34801561138157600080fd5b50600e5461076490600160f81b900460ff1681565b3480156113a257600080fd5b5061070f601c5481565b3480156113b857600080fd5b506108b96113c7366004614f0f565b61328b565b3480156113d857600080fd5b506108b96113e7366004614ef2565b6132ec565b3480156113f857600080fd5b50600754610794906001600160a01b031681565b34801561141857600080fd5b506108b961142736600461513d565b613663565b34801561143857600080fd5b506108b9611447366004614ef2565b6136d8565b34801561145857600080fd5b506108b9611467366004615346565b6137d4565b34801561147857600080fd5b506108b961148736600461520f565b613837565b34801561149857600080fd5b50600f5461076490610100900460ff1681565b3480156114b757600080fd5b5061070f613899565b6060600380546114cf90615364565b80601f01602080910402602001604051908101604052809291908181526020018280546114fb90615364565b80156115485780601f1061151d57610100808354040283529160200191611548565b820191906000526020600020905b81548152906001019060200180831161152b57829003601f168201915b5050505050905090565b600061155f338484613949565b5060015b92915050565b6000611576848484613a6e565b6115c884336115c38560405180606001604052806028815260200161582c602891396001600160a01b038a16600090815260016020908152604080832033845290915290205491906141c6565b613949565b5060019392505050565b6005546001600160a01b0361010090910416331461160b5760405162461bcd60e51b81526004016116029061539e565b60405180910390fd5b6001600160a01b0382166000818152602c6020908152604091829020805460ff191685151590811790915591519182527fb9106fbc209b7c7e02cbe18cd9dae6cc424cb412a970afdd18ff8ba07f19bb7991015b60405180910390a25050565b600754604080516342d359d760e11b815290516000926001600160a01b0316916385a6b3ae9160048083019260209291908290030181865afa1580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d991906153d3565b905090565b6005546001600160a01b0361010090910416331461170e5760405162461bcd60e51b81526004016116029061539e565b60075460405163031e79db60e41b81526001600160a01b038381166004830152909116906331e79db090602401600060405180830381600087803b15801561175557600080fd5b505af1158015611769573d6000803e3d6000fd5b50505050611778816001611ef4565b6001600160a01b03166000908152602c60205260409020805460ff19166001179055565b6005546001600160a01b036101009091041633146117cc5760405162461bcd60e51b81526004016116029061539e565b600754604051632b2e05c160e01b81526001600160a01b03838116600483015290911690632b2e05c1906024015b600060405180830381600087803b15801561181457600080fd5b505af1158015611828573d6000803e3d6000fd5b5050505050565b600754604051635183d6fd60e01b81526004810183905260009182918291829182918291829182916001600160a01b0390911690635183d6fd906024015b61010060405180830381865afa15801561188b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118af91906153ec565b97509750975097509750975097509750919395975091939597565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161155f9185906115c390866138e3565b6005546001600160a01b036101009091041633146119305760405162461bcd60e51b81526004016116029061539e565b600754604051630dcb2e8960e01b8152600481018390526001600160a01b0390911690630dcb2e89906024016117fa565b6005546001600160a01b036101009091041633146119915760405162461bcd60e51b81526004016116029061539e565b600f805461ff0019166101008415150217905560096119b190600a615550565b6119bb908261555f565b60265560646119c960025490565b6119d3919061557e565b6026541015611a245760405162461bcd60e51b815260206004820152601960248201527f6d61782077616c6c6574206d696e20616d6f756e743a203125000000000000006044820152606401611602565b5050565b6005546001600160a01b03610100909104163314611a585760405162461bcd60e51b81526004016116029061539e565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6007546040805163039e107b60e61b815290516000926001600160a01b03169163e7841ec09160048083019260209291908290030181865afa1580156116b5573d6000803e3d6000fd5b6005546001600160a01b03610100909104163314611af45760405162461bcd60e51b81526004016116029061539e565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b60075460405163bc4c4b3760e01b8152336004820152600060248201526001600160a01b039091169063bc4c4b37906044016020604051808303816000875af1158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b91906155a0565b50565b6005546001600160a01b03610100909104163314611bbe5760405162461bcd60e51b81526004016116029061539e565b600e805460ff60b81b1916600160b81b8615150217905560168390556009611be790600a615550565b611bf1908361555f565b601455611c006009600a615550565b611c0a908261555f565b60158190556014541015611c755760405162461bcd60e51b815260206004820152602c60248201527f596f752063616e6e6f742073776170206d6f7265207468616e20746865206d6960448201526b1b9a5b5d5b48185b5bdd5b9d60a21b6064820152608401611602565b6103e8611c8160025490565b611c8b919061557e565b6015541115611ce85760405162461bcd60e51b8152602060048201526024808201527f746f6b656e20746f2073776170206c696d6974656420746f20302e312520737560448201526370706c7960e01b6064820152608401611602565b50505050565b6005546001600160a01b03610100909104163314611d1e5760405162461bcd60e51b81526004016116029061539e565b60005b8151811015611e2d576000838281518110611d3e57611d3e6155bd565b602002602001015190506000611d52600990565b611d5d90600a615550565b848481518110611d6f57611d6f6155bd565b6020026020010151611d81919061555f565b9050611da5611d9e6005546001600160a01b036101009091041690565b83836141f5565b6007546001600160a01b031663e30443bc83611dc0816123c1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015611e0657600080fd5b505af1925050508015611e17575060015b5050508080611e25906155d3565b915050611d21565b505050565b6007546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a08231906024015b602060405180830381865afa158015611e7e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156391906153d3565b6005546001600160a01b03610100909104163314611ed25760405162461bcd60e51b81526004016116029061539e565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03610100909104163314611f245760405162461bcd60e51b81526004016116029061539e565b6001600160a01b0382166000818152602a6020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910161165f565b6005546001600160a01b03610100909104163314611fac5760405162461bcd60e51b81526004016116029061539e565b611fb86009600a615550565b611fc2908361555f565b601255611fd16009600a615550565b611fdb908261555f565b6013556103e8611fea60025490565b611ff4919061557e565b601254101561206b5760405162461bcd60e51b815260206004820152603760248201527f6d61784275795478416d6f756e742073686f756c64206265206174206c65617360448201527f7420302e3125206f6620746f74616c20737570706c792e0000000000000000006064820152608401611602565b6103e861207760025490565b612081919061557e565b6013541015611a245760405162461bcd60e51b815260206004820152603860248201527f6d617853656c6c5478416d6f756e742073686f756c64206265206174206c656160448201527f737420302e3125206f6620746f74616c20737570706c792e00000000000000006064820152608401611602565b6005546001600160a01b036101009091041633146121285760405162461bcd60e51b81526004016116029061539e565b6006546001600160a01b03908116908216036121985760405162461bcd60e51b815260206004820152602960248201527f4c756e613a2054686520726f7574657220616c7265616479206861732074686160448201526874206164647265737360b81b6064820152608401611602565b6006546040516001600160a01b03918216918316907f8fc842bbd331dfa973645f4ed48b11683d501ebf1352708d77a5da2ab49a576e90600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b036101009091041633146122255760405162461bcd60e51b81526004016116029061539e565b6001600160a01b03919091166000908152602960205260409020805460ff1916911515919091179055565b6005546001600160a01b036101009091041633146122805760405162461bcd60e51b81526004016116029061539e565b6007546040516001624d3b8760e01b0319815260048101839052600091829182916001600160a01b03169063ffb2c479906024016060604051808303816000875af11580156122d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f791906155ec565b604080518481526020810184905290810182905260608101889052929550909350915032906000907f02ee4fa0e0f93643fbf0adbcf4f53d3567a808a3b2012fef74dc80db086f6a239060800160405180910390a350505050565b6005546001600160a01b036101009091041633146123825760405162461bcd60e51b81526004016116029061539e565b600554604051479161010090046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015611a24573d6000803e3d6000fd5b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b0361010090910416331461240c5760405162461bcd60e51b81526004016116029061539e565b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b6005546001600160a01b0361010090910416331461248c5760405162461bcd60e51b81526004016116029061539e565b600b546001600160a01b03908116908216036125055760405162461bcd60e51b815260206004820152603260248201527f4c756e613a20546865206c69717569646974792057616c6c657420697320616c60448201527172656164792074686973206164647265737360701b6064820152608401611602565b611a58816001611ef4565b6005546001600160a01b036101009091041633146125405760405162461bcd60e51b81526004016116029061539e565b600e8054911515600160c81b0260ff60c81b19909216919091179055565b6005546001600160a01b0361010090910416331461258e5760405162461bcd60e51b81526004016116029061539e565b60255481036125fa5760405162461bcd60e51b815260206004820152603260248201527f4c756e613a2043616e6e6f742075706461746520676173466f7250726f63657360448201527173696e6720746f2073616d652076616c756560701b6064820152608401611602565b6025819055604051819081907f40d7e40e79af4e8e5a9b3c57030d8ea93f13d669c06d448c4d631d4ae7d23db790600090a350565b6005546001600160a01b0361010090910416331461265f5760405162461bcd60e51b81526004016116029061539e565b601055565b6005546001600160a01b036101009091041633146126945760405162461bcd60e51b81526004016116029061539e565b600e8054911515600160c01b0260ff60c01b19909216919091179055565b6060600480546114cf90615364565b600754604080516304ddf6ef60e11b815290516000926001600160a01b0316916309bbedde9160048083019260209291908290030181865afa1580156116b5573d6000803e3d6000fd5b6005546001600160a01b0361010090910416331461273b5760405162461bcd60e51b81526004016116029061539e565b8151815180821461278e5760405162461bcd60e51b815260206004820152601960248201527f6c69737473206d75737420686176652073616d652073697a65000000000000006044820152606401611602565b60005b8351811015611828578381815181106127ac576127ac6155bd565b6020026020010151602c60008784815181106127ca576127ca6155bd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555084818151811061281b5761281b6155bd565b60200260200101516001600160a01b03167fb9106fbc209b7c7e02cbe18cd9dae6cc424cb412a970afdd18ff8ba07f19bb7985838151811061285f5761285f6155bd565b6020026020010151604051612878911515815260200190565b60405180910390a28061288a816155d3565b915050612791565b6005546001600160a01b036101009091041633146128c25760405162461bcd60e51b81526004016116029061539e565b6008546001600160a01b039081169083160361295a5760405162461bcd60e51b815260206004820152604b60248201527f4c756e613a205468652050616e63616b655377617020706169722063616e6e6f60448201527f742062652072656d6f7665642066726f6d206175746f6d617465644d61726b6560648201526a744d616b6572506169727360a81b608482015260a401611602565b611a248282614378565b6005546000906001600160a01b036101009091041633146129975760405162461bcd60e51b81526004016116029061539e565b81600003612a0a576040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156129e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0791906153d3565b91505b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb906044016020604051808303816000875af1158015612a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a7d91906155a0565b949350505050565b6005546001600160a01b03610100909104163314612ab55760405162461bcd60e51b81526004016116029061539e565b60026017819055601881905560016019819055601a819055601b829055601c829055601d819055601e819055601f819055602081905560218190556022819055612b1591612b0f90829082908290829082908290806138e3565b906138e3565b602381905550612b4a602254612b0f601a54612b0f601d54612b0f602054612b0f601c546018546138e390919063ffffffff16565b602455565b600061155f33846115c385604051806060016040528060258152602001615854602591393360009081526001602090815260408083206001600160a01b038d16845290915290205491906141c6565b600061155f338484613a6e565b6005546001600160a01b03610100909104163314612bdb5760405162461bcd60e51b81526004016116029061539e565b6009546001600160a01b0390811690821603612c545760405162461bcd60e51b815260206004820152603260248201527f4c756e613a20546865206d61726b6574696e672077616c6c657420697320616c60448201527172656164792074686973206164647265737360701b6064820152608401611602565b612c5f816001611ef4565b6009546040516001600160a01b038084169216907f8616c7a330e3cf61290821331585511f1e2778171e2b005fb5ec60cfe874dc6790600090a3600980546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03610100909104163314612ceb5760405162461bcd60e51b81526004016116029061539e565b60075460405163031e79db60e41b81526001600160a01b038381166004830152909116906331e79db0906024016117fa565b6005546001600160a01b03610100909104163314612d4d5760405162461bcd60e51b81526004016116029061539e565b6018869055601a839055601d8290556020859055601c8490556022819055602154601954601e54601f54601b54601754612d969594612b0f9490938593919284928391906138e3565b602381905550612dcb602254612b0f601a54612b0f601d54612b0f602054612b0f601c546018546138e390919063ffffffff16565b602455602354612deb57600e80546001600160f81b031690556000612e03565b600e80546001600160f81b0316600160f81b17905560015b50600060245411612e1f57600f805460ff191690556000612e30565b600f805460ff191660019081179091555b506019602454602354612e43919061561a565b10612e9a5760405162461bcd60e51b815260206004820152602160248201527f796f752063616e6e6f74207365742066656573206d6f7265207468656e2032356044820152602560f81b6064820152608401611602565b505050505050565b6005546001600160a01b03610100909104163314612ed25760405162461bcd60e51b81526004016116029061539e565b6007546040516001624d3b8760e01b03198152600481018390526001600160a01b039091169063ffb2c479906024016060604051808303816000875af1158015612f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f4491906155ec565b5050600c80546001600160a01b0319166001600160a01b03858116918217909255600754604051633f1f3fe960e11b815260048101929092529091169150637e3e7fd2906024015b600060405180830381600087803b158015612fa657600080fd5b505af1158015612e9a573d6000803e3d6000fd5b6005546001600160a01b03610100909104163314612fea5760405162461bcd60e51b81526004016116029061539e565b600e8054911515600160a81b0260ff60a81b19931515600160b01b0260ff60b01b19951515600160a01b029590951662ff00ff60a01b19909316929092179390931791909116179055565b6005546001600160a01b036101009091041633146130655760405162461bcd60e51b81526004016116029061539e565b60005b828110156130d65781602a6000868685818110613087576130876155bd565b905060200201602081019061309c9190614ef2565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806130ce816155d3565b915050613068565b507f7fdaf542373fa84f4ee8d662c642f44e4c2276a217d7d29e548b6eb29a233b3583838360405161310a93929190615632565b60405180910390a1505050565b6005546001600160a01b036101009091041633146131475760405162461bcd60e51b81526004016116029061539e565b601155565b6005546001600160a01b0361010090910416331461317c5760405162461bcd60e51b81526004016116029061539e565b600e8054921515600160f81b026001600160f81b03941515600160f01b02949094166001600160f01b0390931692909217929092179055600f805491151560ff19909216919091179055565b6007546040516302a2e74960e61b81526001600160a01b038381166004830152600092169063a8b9d24090602401611e61565b6005546001600160a01b0361010090910416331461322b5760405162461bcd60e51b81526004016116029061539e565b600e8054911515600160d81b0260ff60d81b19909216919091179055565b60075460405163fbcbc0f160e01b81526001600160a01b038381166004830152600092839283928392839283928392839291169063fbcbc0f19060240161186d565b6005546001600160a01b036101009091041633146132bb5760405162461bcd60e51b81526004016116029061539e565b60075460405163e98030c760e01b8152600481018390526001600160a01b039091169063e98030c7906024016117fa565b6005546001600160a01b0361010090910416331461331c5760405162461bcd60e51b81526004016116029061539e565b6007546001600160a01b03908116908216036133965760405162461bcd60e51b815260206004820152603360248201527f4c756e613a20546865206469766964656e6420747261636b657220616c7265616044820152726479206861732074686174206164647265737360681b6064820152608401611602565b6000819050306001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613407919061568b565b6001600160a01b0316146134935760405162461bcd60e51b815260206004820152604760248201527f4c756e613a20546865206e6577206469766964656e6420747261636b6572206d60448201527f757374206265206f776e656420627920746865204c756e6120746f6b656e20636064820152661bdb9d1c9858dd60ca1b608482015260a401611602565b60405163031e79db60e41b81526001600160a01b03821660048201819052906331e79db090602401600060405180830381600087803b1580156134d557600080fd5b505af11580156134e9573d6000803e3d6000fd5b505060405163031e79db60e41b81523060048201526001600160a01b03841692506331e79db09150602401600060405180830381600087803b15801561352e57600080fd5b505af1158015613542573d6000803e3d6000fd5b505060065460405163031e79db60e41b81526001600160a01b03918216600482015290841692506331e79db09150602401600060405180830381600087803b15801561358d57600080fd5b505af11580156135a1573d6000803e3d6000fd5b5050600d5460405163031e79db60e41b81526001600160a01b03918216600482015290841692506331e79db09150602401600060405180830381600087803b1580156135ec57600080fd5b505af1158015613600573d6000803e3d6000fd5b50506007546040516001600160a01b03918216935090851691507fbcfaf8fe6449758c7941a8dc064e50f6df533f4808331d1a26ec6231c290986390600090a3600780546001600160a01b0319166001600160a01b039290921691909117905550565b6005546001600160a01b036101009091041633146136935760405162461bcd60e51b81526004016116029061539e565b600e54600160d01b900460ff16156136aa57600080fd5b600e805460ff60d01b1916600160d01b8315158102919091179182905560ff91041615611b8b574260285550565b6005546001600160a01b036101009091041633146137085760405162461bcd60e51b81526004016116029061539e565b6001600160a01b03811661376d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611602565b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6005546001600160a01b036101009091041633146138045760405162461bcd60e51b81526004016116029061539e565b600e8054921515600160e81b0260ff60e81b19921515600160e01b029290921661ffff60e01b1990931692909217179055565b6005546001600160a01b036101009091041633146138675760405162461bcd60e51b81526004016116029061539e565b60178690556019839055601e829055601f859055601b8490556021819055612d9681612b0f858186818b818e8d6138e3565b60075460408051631bc9e27b60e21b815290516000926001600160a01b031691636f2789ec9160048083019260209291908290030181865afa1580156116b5573d6000803e3d6000fd5b6000806138f0838561561a565b9050838110156139425760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401611602565b9392505050565b6001600160a01b0383166139ab5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611602565b6001600160a01b038216613a0c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611602565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600080601454613a7d306123c1565b600e549111159150600160d01b900460ff16613b0a576001600160a01b03851660009081526029602052604090205460ff16613b0a5760405162461bcd60e51b815260206004820152602660248201527f63616e6e6f74207472616465206265666f726520746865206d61726b6574206f60448201526570656e696e6760d01b6064820152608401611602565b600f5462010000900460ff16613fe4576001600160a01b0385166000908152602b602052604090205460ff1615613ccc576001600160a01b0384166000908152602a60205260409020546001925060ff16613cc757600e54600160e81b900460ff1615613bc357601254831115613bc35760405162461bcd60e51b815260206004820152601d60248201527f6d61784275795478416d6f756e74204c696d69742045786365656465640000006044820152606401611602565b42602854601e613bd3919061561a565b1015613cc757426028546007613be9919061561a565b10613c365760405162461bcd60e51b815260206004820152601960248201527f596f752063616e6e6f7420627579206174206c61756e63682e000000000000006044820152606401611602565b6010546001600160a01b0385166000908152602d60205260409020544291613c5d9161561a565b1115613cab5760405162461bcd60e51b815260206004820152601f60248201527f596f752063616e6e6f7420646f206d756c74692d627579206f72646572732e006044820152606401611602565b6001600160a01b0384166000908152602d602052604090204290555b613de7565b6001600160a01b0384166000908152602b602052604090205460ff1615613de757600e5460029250600160b81b900460ff168015613d1f5750600854600090613d1d906001600160a01b03166123c1565b115b8015613d2d5750600f5460ff165b15613d6357808015613d4e575042601654602754613d4b919061561a565b11155b15613d635742602755601554613d6390614507565b6001600160a01b0385166000908152602a602052604090205460ff16613de757600e54600160e01b900460ff1615613de757601354831115613de75760405162461bcd60e51b815260206004820152601e60248201527f6d617853656c6c5478416d6f756e74204c696d697420457863656564656400006044820152606401611602565b600f54610100900460ff1615613e715760265483613e04866123c1565b613e0e919061561a565b111580613e3357506001600160a01b0384166000908152602c602052604090205460ff165b613e715760405162461bcd60e51b815260206004820152600f60248201526e1b585e15d85b1b195d081b1a5b5a5d608a1b6044820152606401611602565b600e54600160f01b900460ff1615613fe457816001148015613e9c5750600e54600160f81b900460ff165b8015613ec157506001600160a01b0384166000908152602a602052604090205460ff16155b15613f39576000606460235485613ed8919061555f565b613ee2919061557e565b9050613eee81856156a8565b93506000602354601e5483613f03919061555f565b613f0d919061557e565b9050613f1a8730846141f5565b600d54613f329030906001600160a01b0316836141f5565b5050613fe4565b816002148015613f4b5750600f5460ff165b8015613f7057506001600160a01b0385166000908152602a602052604090205460ff16155b15613fe4576000606460245485613f87919061555f565b613f91919061557e565b9050613f9d81856156a8565b93506000602454601d5483613fb2919061555f565b613fbc919061557e565b9050613fc98730846141f5565b600d54613fe19030906001600160a01b0316836141f5565b50505b613fef8585856141f5565b6007546001600160a01b031663e30443bc8661400a816123c1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561405057600080fd5b505af1925050508015614061575060015b506007546001600160a01b031663e30443bc8561407d816123c1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156140c357600080fd5b505af19250505080156140d4575060015b50600f5462010000900460ff161580156140f75750600e54600160c01b900460ff165b15611828576025546007546040516001624d3b8760e01b03198152600481018390526001600160a01b039091169063ffb2c479906024016060604051808303816000875af1925050508015614169575060408051601f3d908101601f19168201909252614166918101906155ec565b60015b15612e9a5760408051848152602081018490529081018290526060810185905232906001907f02ee4fa0e0f93643fbf0adbcf4f53d3567a808a3b2012fef74dc80db086f6a239060800160405180910390a3505050505050505050565b600081848411156141ea5760405162461bcd60e51b81526004016116029190614dd4565b50612a7d83856156a8565b6001600160a01b0383166142595760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611602565b6001600160a01b0382166142bb5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611602565b6142f881604051806060016040528060268152602001615806602691396001600160a01b03861660009081526020819052604090205491906141c6565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461432790826138e3565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101613a61565b6005546001600160a01b036101009091041633146143a85760405162461bcd60e51b81526004016116029061539e565b6001600160a01b0382166000908152602b602052604090205481151560ff90911615150361443e5760405162461bcd60e51b815260206004820152603e60248201527f4c756e613a204175746f6d61746564206d61726b6574206d616b65722070616960448201527f7220697320616c72656164792073657420746f20746861742076616c756500006064820152608401611602565b6001600160a01b0382166000908152602b60205260409020805460ff191682158015919091179091556144cb5760075460405163031e79db60e41b81526001600160a01b038481166004830152909116906331e79db090602401600060405180830381600087803b1580156144b257600080fd5b505af11580156144c6573d6000803e3d6000fd5b505050505b604051811515906001600160a01b038416907fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab90600090a35050565b600f805462ff000019166201000017905560185460009060649061452c90849061555f565b614536919061557e565b90506000606483601d5461454a919061555f565b614554919061557e565b90506000600260648560205461456a919061555f565b614574919061557e565b61457e919061557e565b90506000818361458e86886156a8565b61459891906156a8565b6145a291906156a8565b90506145ad816148ae565b600a546145c59030906001600160a01b0316856141f5565b600e544790600160a01b900460ff1680156145e257506000601c54115b156146ae57600061460a602454614604601c54856149d290919063ffffffff16565b90614a54565b6009546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461465c576040519150601f19603f3d011682016040523d82523d6000602084013e614661565b606091505b50509050801561469f576040518281527f14c3945b0e552cb130d2e123df9730f5b69c4872acd0fc354d63649227d61f129060200160405180910390a15b6146a982846156a8565b925050505b600e54600160a81b900460ff1680156146c957506000601a54115b1561478f5760006146eb602454614604601a54856149d290919063ffffffff16565b600a546040519192506000916001600160a01b039091169083908381818185875af1925050503d806000811461473d576040519150601f19603f3d011682016040523d82523d6000602084013e614742565b606091505b505090508015614780576040518281527f44938a1fddf9b9ffd2b89b61cda87023cb90d1cc8dd695cfe33391b5749609519060200160405180910390a15b61478a82846156a8565b925050505b600e54600160b01b900460ff16156147e25760006147be602454614604602054856149d290919063ffffffff16565b905060058111156147e0576147d38482614aaf565b6147dd81836156a8565b91505b505b600e54600160c01b900460ff161561489a576402540be40081111561489a5761480a81614b5c565b600c546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015614853573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061487791906153d3565b600c54600754919250614898916001600160a01b0391821691168084614cbb565b505b5050600f805462ff00001916905550505050565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106148e3576148e36155bd565b6001600160a01b03928316602091820292909201810191909152600654604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa15801561493c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614960919061568b565b81600181518110614973576149736155bd565b6001600160a01b0392831660209182029290920101526006546149999130911684613949565b60065460405163791ac94760e01b81526001600160a01b039091169063791ac94790612f8c908590600090869030904290600401615703565b6000826000036149e457506000611563565b60006149f0838561555f565b9050826149fd858361557e565b146139425760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401611602565b6000808211614aa55760405162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f0000000000006044820152606401611602565b613942828461557e565b600654614ac79030906001600160a01b031684613949565b600654600b5460405163f305d71960e01b81523060048201526024810185905260006044820181905260648201526001600160a01b0391821660848201524260a482015291169063f305d71990839060c40160606040518083038185885af1158015614b37573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061182891906155ec565b6040805160028082526060820183526000926020830190803683375050600654604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015614bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bea919061568b565b81600081518110614bfd57614bfd6155bd565b6001600160a01b039283166020918202929092010152600c54825191169082906001908110614c2e57614c2e6155bd565b6001600160a01b039283166020918202929092010152600654604051637ff36ab560e01b8152911690637ff36ab5908490614c749060009086903090429060040161573f565b60006040518083038185885af1158015614c92573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611e2d9190810190615774565b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018390526000919086169063a9059cbb906044016020604051808303816000875af1158015614d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614d3291906155a0565b9050801561182857604051633243c79160e01b8152600481018390526001600160a01b03841690633243c79190602401600060405180830381600087803b158015614d7c57600080fd5b505af1158015614d90573d6000803e3d6000fd5b505050507fb0cc2628d6d644cf6be9d8110e142297ac910d6d8026d795a99f272fd9ad60b182604051614dc591815260200190565b60405180910390a15050505050565b600060208083528351808285015260005b81811015614e0157858101830151858201604001528201614de5565b81811115614e13576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114611b8b57600080fd5b60008060408385031215614e5157600080fd5b8235614e5c81614e29565b946020939093013593505050565b600080600060608486031215614e7f57600080fd5b8335614e8a81614e29565b92506020840135614e9a81614e29565b929592945050506040919091013590565b8015158114611b8b57600080fd5b60008060408385031215614ecc57600080fd5b8235614ed781614e29565b91506020830135614ee781614eab565b809150509250929050565b600060208284031215614f0457600080fd5b813561394281614e29565b600060208284031215614f2157600080fd5b5035919050565b60008060408385031215614f3b57600080fd5b8235614e5c81614eab565b60008060008060808587031215614f5c57600080fd5b8435614f6781614eab565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614fc057614fc0614f81565b604052919050565b600067ffffffffffffffff821115614fe257614fe2614f81565b5060051b60200190565b600082601f830112614ffd57600080fd5b8135602061501261500d83614fc8565b614f97565b82815260059290921b8401810191818101908684111561503157600080fd5b8286015b8481101561505557803561504881614e29565b8352918301918301615035565b509695505050505050565b6000806040838503121561507357600080fd5b823567ffffffffffffffff8082111561508b57600080fd5b61509786838701614fec565b93506020915081850135818111156150ae57600080fd5b85019050601f810186136150c157600080fd5b80356150cf61500d82614fc8565b81815260059190911b820183019083810190888311156150ee57600080fd5b928401925b8284101561510c578335825292840192908401906150f3565b80955050505050509250929050565b6000806040838503121561512e57600080fd5b50508035926020909101359150565b60006020828403121561514f57600080fd5b813561394281614eab565b6000806040838503121561516d57600080fd5b823567ffffffffffffffff8082111561518557600080fd5b61519186838701614fec565b93506020915081850135818111156151a857600080fd5b85019050601f810186136151bb57600080fd5b80356151c961500d82614fc8565b81815260059190911b820183019083810190888311156151e857600080fd5b928401925b8284101561510c57833561520081614eab565b825292840192908401906151ed565b60008060008060008060c0878903121561522857600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60008060006060848603121561526757600080fd5b833561527281614eab565b9250602084013561528281614eab565b9150604084013561529281614eab565b809150509250925092565b6000806000604084860312156152b257600080fd5b833567ffffffffffffffff808211156152ca57600080fd5b818601915086601f8301126152de57600080fd5b8135818111156152ed57600080fd5b8760208260051b850101111561530257600080fd5b6020928301955093505084013561529281614eab565b6000806040838503121561532b57600080fd5b823561533681614e29565b91506020830135614ee781614e29565b6000806040838503121561535957600080fd5b8235614ed781614eab565b600181811c9082168061537857607f821691505b60208210810361539857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156153e557600080fd5b5051919050565b600080600080600080600080610100898b03121561540957600080fd5b885161541481614e29565b809850506020890151965060408901519550606089015194506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156154a757816000190482111561548d5761548d615456565b8085161561549a57918102915b93841c9390800290615471565b509250929050565b6000826154be57506001611563565b816154cb57506000611563565b81600181146154e157600281146154eb57615507565b6001915050611563565b60ff8411156154fc576154fc615456565b50506001821b611563565b5060208310610133831016604e8410600b841016171561552a575081810a611563565b615534838361546c565b806000190482111561554857615548615456565b029392505050565b600061394260ff8416836154af565b600081600019048311821515161561557957615579615456565b500290565b60008261559b57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156155b257600080fd5b815161394281614eab565b634e487b7160e01b600052603260045260246000fd5b6000600182016155e5576155e5615456565b5060010190565b60008060006060848603121561560157600080fd5b8351925060208401519150604084015190509250925092565b6000821982111561562d5761562d615456565b500190565b6040808252810183905260008460608301825b8681101561567557823561565881614e29565b6001600160a01b0316825260209283019290910190600101615645565b5080925050508215156020830152949350505050565b60006020828403121561569d57600080fd5b815161394281614e29565b6000828210156156ba576156ba615456565b500390565b600081518084526020808501945080840160005b838110156156f85781516001600160a01b0316875295820195908201906001016156d3565b509495945050505050565b85815284602082015260a06040820152600061572260a08301866156bf565b6001600160a01b0394909416606083015250608001529392505050565b84815260806020820152600061575860808301866156bf565b6001600160a01b03949094166040830152506060015292915050565b6000602080838503121561578757600080fd5b825167ffffffffffffffff81111561579e57600080fd5b8301601f810185136157af57600080fd5b80516157bd61500d82614fc8565b81815260059190911b820183019083810190878311156157dc57600080fd5b928401925b828410156157fa578351825292840192908401906157e1565b97965050505050505056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220d87b129a33e86fa859a820b362f432a90ccd020c081b11243a599dd19ebeb6a964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 536,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 542,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 544,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 546,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 548,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 550,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_decimals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 4867,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2000,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Router02)7001"
      },
      {
        "astId": 2003,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_lunaDividendTracker",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(_LUNADividendTracker)1981"
      },
      {
        "astId": 2005,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "uniswapV2Pair",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2008,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "marketingWallet",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2011,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "lunaBurnWallet",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2014,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "liqWallet",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2016,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_lunaDividendToken",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2019,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "deadWallet",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2022,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "lunaAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 2025,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "marketingSwapSendActive",
        "offset": 20,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2028,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "lunaBurnSwapSendActive",
        "offset": 21,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2031,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "LiqSwapSendActive",
        "offset": 22,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2034,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "swapAndLiquifyEnabled",
        "offset": 23,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2037,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "ProcessDividendStatus",
        "offset": 24,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2040,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "_lunaDividendEnabled",
        "offset": 25,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2042,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "marketActive",
        "offset": 26,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2045,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "blockMultiBuys",
        "offset": 27,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2048,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "limitSells",
        "offset": 28,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2051,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "limitBuys",
        "offset": 29,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2054,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "feeStatus",
        "offset": 30,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2057,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "buyFeeStatus",
        "offset": 31,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2060,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "sellFeeStatus",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2063,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "maxWallet",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2065,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "isInternalTransaction",
        "offset": 2,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 2068,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "buySecondsLimit",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2075,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "minimumWeiForTokenomics",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2077,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "maxBuyTxAmount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2079,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "maxSellTxAmount",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2087,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "minimumTokensBeforeSwap",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2095,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "tokensToSwap",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2098,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "intervalSecondsForSwap",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2101,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "LUNARewardsBuyFee",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2104,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "LUNARewardsSellFee",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2107,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "LUNABurnBuyFee",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2110,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "LUNABurnSellFee",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 2113,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "marketingBuyFee",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 2116,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "marketingSellFee",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 2119,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "burnSellFee",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 2122,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "burnBuyFee",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 2125,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "liqBuyFee",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 2128,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "liqSellFee",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 2131,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "devBuyFee",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 2134,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "devSellFee",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 2152,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "totalBuyFees",
        "offset": 0,
        "slot": "35",
        "type": "t_uint256"
      },
      {
        "astId": 2170,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "totalSellFees",
        "offset": 0,
        "slot": "36",
        "type": "t_uint256"
      },
      {
        "astId": 2173,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "gasForProcessing",
        "offset": 0,
        "slot": "37",
        "type": "t_uint256"
      },
      {
        "astId": 2175,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "maxWalletAmount",
        "offset": 0,
        "slot": "38",
        "type": "t_uint256"
      },
      {
        "astId": 2177,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "startTimeForSwap",
        "offset": 0,
        "slot": "39",
        "type": "t_uint256"
      },
      {
        "astId": 2179,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "marketActiveAt",
        "offset": 0,
        "slot": "40",
        "type": "t_uint256"
      },
      {
        "astId": 2186,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "premarketUser",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2190,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "excludedFromFees",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2194,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "automatedMarketMakerPairs",
        "offset": 0,
        "slot": "43",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2198,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "excludedFromMaxWallet",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2203,
        "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
        "label": "userLastTradeData",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_address,t_struct(userData)2182_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router02)7001": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(_LUNADividendTracker)1981": {
        "encoding": "inplace",
        "label": "contract _LUNADividendTracker",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(userData)2182_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TestNet_LunaMoon_V0_1.userData)",
        "numberOfBytes": "32",
        "value": "t_struct(userData)2182_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(userData)2182_storage": {
        "encoding": "inplace",
        "label": "struct TestNet_LunaMoon_V0_1.userData",
        "members": [
          {
            "astId": 2181,
            "contract": "contracts/LunaMoon.sol:TestNet_LunaMoon_V0_1",
            "label": "lastBuyTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}